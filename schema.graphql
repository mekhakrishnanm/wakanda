"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type AzuroBetContract {
  id: ID!
  core: CoreContract!
  address: String!
}

input AzuroBetContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  core: String
  core_not: String
  core_gt: String
  core_lt: String
  core_gte: String
  core_lte: String
  core_in: [String!]
  core_not_in: [String!]
  core_contains: String
  core_contains_nocase: String
  core_not_contains: String
  core_not_contains_nocase: String
  core_starts_with: String
  core_starts_with_nocase: String
  core_not_starts_with: String
  core_not_starts_with_nocase: String
  core_ends_with: String
  core_ends_with_nocase: String
  core_not_ends_with: String
  core_not_ends_with_nocase: String
  core_: CoreContract_filter
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AzuroBetContract_filter]
  or: [AzuroBetContract_filter]
}

enum AzuroBetContract_orderBy {
  id
  core
  address
}

type Bet {
  """Core contract address + Bet Id"""
  id: ID!
  core: CoreContract!
  type: BetType!
  betId: BigInt!
  bettor: String!
  owner: String!
  actor: String!
  affiliate: String
  _conditions(skip: Int = 0, first: Int = 100, orderBy: Condition_orderBy, orderDirection: OrderDirection, where: Condition_filter): [Condition!]!
  _conditionIds: [BigInt!]!
  rawAmount: BigInt!
  amount: BigDecimal!
  _tokenDecimals: Int!
  rawPotentialPayout: BigInt!
  potentialPayout: BigDecimal!
  rawPayout: BigInt
  payout: BigDecimal
  rawOdds: BigInt!
  odds: BigDecimal!
  _oddsDecimals: Int!
  rawSettledOdds: BigInt
  settledOdds: BigDecimal
  rawSettledMargin: BigInt
  settledMargin: BigDecimal
  _marginsForSettle: String

  """when the last game from all sub bets starts at + 2h"""
  approxSettledAt: BigInt!
  selections(skip: Int = 0, first: Int = 100, orderBy: Selection_orderBy, orderDirection: OrderDirection, where: Selection_filter): [Selection!]!
  _games(skip: Int = 0, first: Int = 100, orderBy: Game_orderBy, orderDirection: OrderDirection, where: Game_filter): [Game!]!
  createdBlockNumber: BigInt!
  createdBlockTimestamp: BigInt!
  createdTxHash: String!
  resolvedBlockNumber: BigInt
  resolvedBlockTimestamp: BigInt
  resolvedTxHash: String
  status: BetStatus!
  result: BetResult
  isRedeemable: Boolean!
  isRedeemed: Boolean!
  redeemedBlockNumber: BigInt
  redeemedBlockTimestamp: BigInt
  redeemedTxHash: String
  _subBetsCount: Int!
  _wonSubBetsCount: Int!
  _lostSubBetsCount: Int!
  _canceledSubBetsCount: Int!
  _isFreebet: Boolean!
  freebet: Freebet
  _updatedAt: BigInt!
}

type BetMargin {
  id: ID!
  margins: String!
}

input BetMargin_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  margins: String
  margins_not: String
  margins_gt: String
  margins_lt: String
  margins_gte: String
  margins_lte: String
  margins_in: [String!]
  margins_not_in: [String!]
  margins_contains: String
  margins_contains_nocase: String
  margins_not_contains: String
  margins_not_contains_nocase: String
  margins_starts_with: String
  margins_starts_with_nocase: String
  margins_not_starts_with: String
  margins_not_starts_with_nocase: String
  margins_ends_with: String
  margins_ends_with_nocase: String
  margins_not_ends_with: String
  margins_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BetMargin_filter]
  or: [BetMargin_filter]
}

enum BetMargin_orderBy {
  id
  margins
}

enum BetResult {
  Won
  Lost
}

enum BetStatus {
  Accepted
  Canceled
  Resolved
}

enum BetType {
  Ordinar
  Express
}

input Bet_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  core: String
  core_not: String
  core_gt: String
  core_lt: String
  core_gte: String
  core_lte: String
  core_in: [String!]
  core_not_in: [String!]
  core_contains: String
  core_contains_nocase: String
  core_not_contains: String
  core_not_contains_nocase: String
  core_starts_with: String
  core_starts_with_nocase: String
  core_not_starts_with: String
  core_not_starts_with_nocase: String
  core_ends_with: String
  core_ends_with_nocase: String
  core_not_ends_with: String
  core_not_ends_with_nocase: String
  core_: CoreContract_filter
  type: BetType
  type_not: BetType
  type_in: [BetType!]
  type_not_in: [BetType!]
  betId: BigInt
  betId_not: BigInt
  betId_gt: BigInt
  betId_lt: BigInt
  betId_gte: BigInt
  betId_lte: BigInt
  betId_in: [BigInt!]
  betId_not_in: [BigInt!]
  bettor: String
  bettor_not: String
  bettor_gt: String
  bettor_lt: String
  bettor_gte: String
  bettor_lte: String
  bettor_in: [String!]
  bettor_not_in: [String!]
  bettor_contains: String
  bettor_contains_nocase: String
  bettor_not_contains: String
  bettor_not_contains_nocase: String
  bettor_starts_with: String
  bettor_starts_with_nocase: String
  bettor_not_starts_with: String
  bettor_not_starts_with_nocase: String
  bettor_ends_with: String
  bettor_ends_with_nocase: String
  bettor_not_ends_with: String
  bettor_not_ends_with_nocase: String
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  actor: String
  actor_not: String
  actor_gt: String
  actor_lt: String
  actor_gte: String
  actor_lte: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_contains: String
  actor_contains_nocase: String
  actor_not_contains: String
  actor_not_contains_nocase: String
  actor_starts_with: String
  actor_starts_with_nocase: String
  actor_not_starts_with: String
  actor_not_starts_with_nocase: String
  actor_ends_with: String
  actor_ends_with_nocase: String
  actor_not_ends_with: String
  actor_not_ends_with_nocase: String
  affiliate: String
  affiliate_not: String
  affiliate_gt: String
  affiliate_lt: String
  affiliate_gte: String
  affiliate_lte: String
  affiliate_in: [String!]
  affiliate_not_in: [String!]
  affiliate_contains: String
  affiliate_contains_nocase: String
  affiliate_not_contains: String
  affiliate_not_contains_nocase: String
  affiliate_starts_with: String
  affiliate_starts_with_nocase: String
  affiliate_not_starts_with: String
  affiliate_not_starts_with_nocase: String
  affiliate_ends_with: String
  affiliate_ends_with_nocase: String
  affiliate_not_ends_with: String
  affiliate_not_ends_with_nocase: String
  _conditions: [String!]
  _conditions_not: [String!]
  _conditions_contains: [String!]
  _conditions_contains_nocase: [String!]
  _conditions_not_contains: [String!]
  _conditions_not_contains_nocase: [String!]
  _conditions_: Condition_filter
  _conditionIds: [BigInt!]
  _conditionIds_not: [BigInt!]
  _conditionIds_contains: [BigInt!]
  _conditionIds_contains_nocase: [BigInt!]
  _conditionIds_not_contains: [BigInt!]
  _conditionIds_not_contains_nocase: [BigInt!]
  rawAmount: BigInt
  rawAmount_not: BigInt
  rawAmount_gt: BigInt
  rawAmount_lt: BigInt
  rawAmount_gte: BigInt
  rawAmount_lte: BigInt
  rawAmount_in: [BigInt!]
  rawAmount_not_in: [BigInt!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  _tokenDecimals: Int
  _tokenDecimals_not: Int
  _tokenDecimals_gt: Int
  _tokenDecimals_lt: Int
  _tokenDecimals_gte: Int
  _tokenDecimals_lte: Int
  _tokenDecimals_in: [Int!]
  _tokenDecimals_not_in: [Int!]
  rawPotentialPayout: BigInt
  rawPotentialPayout_not: BigInt
  rawPotentialPayout_gt: BigInt
  rawPotentialPayout_lt: BigInt
  rawPotentialPayout_gte: BigInt
  rawPotentialPayout_lte: BigInt
  rawPotentialPayout_in: [BigInt!]
  rawPotentialPayout_not_in: [BigInt!]
  potentialPayout: BigDecimal
  potentialPayout_not: BigDecimal
  potentialPayout_gt: BigDecimal
  potentialPayout_lt: BigDecimal
  potentialPayout_gte: BigDecimal
  potentialPayout_lte: BigDecimal
  potentialPayout_in: [BigDecimal!]
  potentialPayout_not_in: [BigDecimal!]
  rawPayout: BigInt
  rawPayout_not: BigInt
  rawPayout_gt: BigInt
  rawPayout_lt: BigInt
  rawPayout_gte: BigInt
  rawPayout_lte: BigInt
  rawPayout_in: [BigInt!]
  rawPayout_not_in: [BigInt!]
  payout: BigDecimal
  payout_not: BigDecimal
  payout_gt: BigDecimal
  payout_lt: BigDecimal
  payout_gte: BigDecimal
  payout_lte: BigDecimal
  payout_in: [BigDecimal!]
  payout_not_in: [BigDecimal!]
  rawOdds: BigInt
  rawOdds_not: BigInt
  rawOdds_gt: BigInt
  rawOdds_lt: BigInt
  rawOdds_gte: BigInt
  rawOdds_lte: BigInt
  rawOdds_in: [BigInt!]
  rawOdds_not_in: [BigInt!]
  odds: BigDecimal
  odds_not: BigDecimal
  odds_gt: BigDecimal
  odds_lt: BigDecimal
  odds_gte: BigDecimal
  odds_lte: BigDecimal
  odds_in: [BigDecimal!]
  odds_not_in: [BigDecimal!]
  _oddsDecimals: Int
  _oddsDecimals_not: Int
  _oddsDecimals_gt: Int
  _oddsDecimals_lt: Int
  _oddsDecimals_gte: Int
  _oddsDecimals_lte: Int
  _oddsDecimals_in: [Int!]
  _oddsDecimals_not_in: [Int!]
  rawSettledOdds: BigInt
  rawSettledOdds_not: BigInt
  rawSettledOdds_gt: BigInt
  rawSettledOdds_lt: BigInt
  rawSettledOdds_gte: BigInt
  rawSettledOdds_lte: BigInt
  rawSettledOdds_in: [BigInt!]
  rawSettledOdds_not_in: [BigInt!]
  settledOdds: BigDecimal
  settledOdds_not: BigDecimal
  settledOdds_gt: BigDecimal
  settledOdds_lt: BigDecimal
  settledOdds_gte: BigDecimal
  settledOdds_lte: BigDecimal
  settledOdds_in: [BigDecimal!]
  settledOdds_not_in: [BigDecimal!]
  rawSettledMargin: BigInt
  rawSettledMargin_not: BigInt
  rawSettledMargin_gt: BigInt
  rawSettledMargin_lt: BigInt
  rawSettledMargin_gte: BigInt
  rawSettledMargin_lte: BigInt
  rawSettledMargin_in: [BigInt!]
  rawSettledMargin_not_in: [BigInt!]
  settledMargin: BigDecimal
  settledMargin_not: BigDecimal
  settledMargin_gt: BigDecimal
  settledMargin_lt: BigDecimal
  settledMargin_gte: BigDecimal
  settledMargin_lte: BigDecimal
  settledMargin_in: [BigDecimal!]
  settledMargin_not_in: [BigDecimal!]
  _marginsForSettle: String
  _marginsForSettle_not: String
  _marginsForSettle_gt: String
  _marginsForSettle_lt: String
  _marginsForSettle_gte: String
  _marginsForSettle_lte: String
  _marginsForSettle_in: [String!]
  _marginsForSettle_not_in: [String!]
  _marginsForSettle_contains: String
  _marginsForSettle_contains_nocase: String
  _marginsForSettle_not_contains: String
  _marginsForSettle_not_contains_nocase: String
  _marginsForSettle_starts_with: String
  _marginsForSettle_starts_with_nocase: String
  _marginsForSettle_not_starts_with: String
  _marginsForSettle_not_starts_with_nocase: String
  _marginsForSettle_ends_with: String
  _marginsForSettle_ends_with_nocase: String
  _marginsForSettle_not_ends_with: String
  _marginsForSettle_not_ends_with_nocase: String
  approxSettledAt: BigInt
  approxSettledAt_not: BigInt
  approxSettledAt_gt: BigInt
  approxSettledAt_lt: BigInt
  approxSettledAt_gte: BigInt
  approxSettledAt_lte: BigInt
  approxSettledAt_in: [BigInt!]
  approxSettledAt_not_in: [BigInt!]
  selections_: Selection_filter
  _games: [String!]
  _games_not: [String!]
  _games_contains: [String!]
  _games_contains_nocase: [String!]
  _games_not_contains: [String!]
  _games_not_contains_nocase: [String!]
  _games_: Game_filter
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  createdBlockTimestamp: BigInt
  createdBlockTimestamp_not: BigInt
  createdBlockTimestamp_gt: BigInt
  createdBlockTimestamp_lt: BigInt
  createdBlockTimestamp_gte: BigInt
  createdBlockTimestamp_lte: BigInt
  createdBlockTimestamp_in: [BigInt!]
  createdBlockTimestamp_not_in: [BigInt!]
  createdTxHash: String
  createdTxHash_not: String
  createdTxHash_gt: String
  createdTxHash_lt: String
  createdTxHash_gte: String
  createdTxHash_lte: String
  createdTxHash_in: [String!]
  createdTxHash_not_in: [String!]
  createdTxHash_contains: String
  createdTxHash_contains_nocase: String
  createdTxHash_not_contains: String
  createdTxHash_not_contains_nocase: String
  createdTxHash_starts_with: String
  createdTxHash_starts_with_nocase: String
  createdTxHash_not_starts_with: String
  createdTxHash_not_starts_with_nocase: String
  createdTxHash_ends_with: String
  createdTxHash_ends_with_nocase: String
  createdTxHash_not_ends_with: String
  createdTxHash_not_ends_with_nocase: String
  resolvedBlockNumber: BigInt
  resolvedBlockNumber_not: BigInt
  resolvedBlockNumber_gt: BigInt
  resolvedBlockNumber_lt: BigInt
  resolvedBlockNumber_gte: BigInt
  resolvedBlockNumber_lte: BigInt
  resolvedBlockNumber_in: [BigInt!]
  resolvedBlockNumber_not_in: [BigInt!]
  resolvedBlockTimestamp: BigInt
  resolvedBlockTimestamp_not: BigInt
  resolvedBlockTimestamp_gt: BigInt
  resolvedBlockTimestamp_lt: BigInt
  resolvedBlockTimestamp_gte: BigInt
  resolvedBlockTimestamp_lte: BigInt
  resolvedBlockTimestamp_in: [BigInt!]
  resolvedBlockTimestamp_not_in: [BigInt!]
  resolvedTxHash: String
  resolvedTxHash_not: String
  resolvedTxHash_gt: String
  resolvedTxHash_lt: String
  resolvedTxHash_gte: String
  resolvedTxHash_lte: String
  resolvedTxHash_in: [String!]
  resolvedTxHash_not_in: [String!]
  resolvedTxHash_contains: String
  resolvedTxHash_contains_nocase: String
  resolvedTxHash_not_contains: String
  resolvedTxHash_not_contains_nocase: String
  resolvedTxHash_starts_with: String
  resolvedTxHash_starts_with_nocase: String
  resolvedTxHash_not_starts_with: String
  resolvedTxHash_not_starts_with_nocase: String
  resolvedTxHash_ends_with: String
  resolvedTxHash_ends_with_nocase: String
  resolvedTxHash_not_ends_with: String
  resolvedTxHash_not_ends_with_nocase: String
  status: BetStatus
  status_not: BetStatus
  status_in: [BetStatus!]
  status_not_in: [BetStatus!]
  result: BetResult
  result_not: BetResult
  result_in: [BetResult!]
  result_not_in: [BetResult!]
  isRedeemable: Boolean
  isRedeemable_not: Boolean
  isRedeemable_in: [Boolean!]
  isRedeemable_not_in: [Boolean!]
  isRedeemed: Boolean
  isRedeemed_not: Boolean
  isRedeemed_in: [Boolean!]
  isRedeemed_not_in: [Boolean!]
  redeemedBlockNumber: BigInt
  redeemedBlockNumber_not: BigInt
  redeemedBlockNumber_gt: BigInt
  redeemedBlockNumber_lt: BigInt
  redeemedBlockNumber_gte: BigInt
  redeemedBlockNumber_lte: BigInt
  redeemedBlockNumber_in: [BigInt!]
  redeemedBlockNumber_not_in: [BigInt!]
  redeemedBlockTimestamp: BigInt
  redeemedBlockTimestamp_not: BigInt
  redeemedBlockTimestamp_gt: BigInt
  redeemedBlockTimestamp_lt: BigInt
  redeemedBlockTimestamp_gte: BigInt
  redeemedBlockTimestamp_lte: BigInt
  redeemedBlockTimestamp_in: [BigInt!]
  redeemedBlockTimestamp_not_in: [BigInt!]
  redeemedTxHash: String
  redeemedTxHash_not: String
  redeemedTxHash_gt: String
  redeemedTxHash_lt: String
  redeemedTxHash_gte: String
  redeemedTxHash_lte: String
  redeemedTxHash_in: [String!]
  redeemedTxHash_not_in: [String!]
  redeemedTxHash_contains: String
  redeemedTxHash_contains_nocase: String
  redeemedTxHash_not_contains: String
  redeemedTxHash_not_contains_nocase: String
  redeemedTxHash_starts_with: String
  redeemedTxHash_starts_with_nocase: String
  redeemedTxHash_not_starts_with: String
  redeemedTxHash_not_starts_with_nocase: String
  redeemedTxHash_ends_with: String
  redeemedTxHash_ends_with_nocase: String
  redeemedTxHash_not_ends_with: String
  redeemedTxHash_not_ends_with_nocase: String
  _subBetsCount: Int
  _subBetsCount_not: Int
  _subBetsCount_gt: Int
  _subBetsCount_lt: Int
  _subBetsCount_gte: Int
  _subBetsCount_lte: Int
  _subBetsCount_in: [Int!]
  _subBetsCount_not_in: [Int!]
  _wonSubBetsCount: Int
  _wonSubBetsCount_not: Int
  _wonSubBetsCount_gt: Int
  _wonSubBetsCount_lt: Int
  _wonSubBetsCount_gte: Int
  _wonSubBetsCount_lte: Int
  _wonSubBetsCount_in: [Int!]
  _wonSubBetsCount_not_in: [Int!]
  _lostSubBetsCount: Int
  _lostSubBetsCount_not: Int
  _lostSubBetsCount_gt: Int
  _lostSubBetsCount_lt: Int
  _lostSubBetsCount_gte: Int
  _lostSubBetsCount_lte: Int
  _lostSubBetsCount_in: [Int!]
  _lostSubBetsCount_not_in: [Int!]
  _canceledSubBetsCount: Int
  _canceledSubBetsCount_not: Int
  _canceledSubBetsCount_gt: Int
  _canceledSubBetsCount_lt: Int
  _canceledSubBetsCount_gte: Int
  _canceledSubBetsCount_lte: Int
  _canceledSubBetsCount_in: [Int!]
  _canceledSubBetsCount_not_in: [Int!]
  _isFreebet: Boolean
  _isFreebet_not: Boolean
  _isFreebet_in: [Boolean!]
  _isFreebet_not_in: [Boolean!]
  freebet: String
  freebet_not: String
  freebet_gt: String
  freebet_lt: String
  freebet_gte: String
  freebet_lte: String
  freebet_in: [String!]
  freebet_not_in: [String!]
  freebet_contains: String
  freebet_contains_nocase: String
  freebet_not_contains: String
  freebet_not_contains_nocase: String
  freebet_starts_with: String
  freebet_starts_with_nocase: String
  freebet_not_starts_with: String
  freebet_not_starts_with_nocase: String
  freebet_ends_with: String
  freebet_ends_with_nocase: String
  freebet_not_ends_with: String
  freebet_not_ends_with_nocase: String
  freebet_: Freebet_filter
  _updatedAt: BigInt
  _updatedAt_not: BigInt
  _updatedAt_gt: BigInt
  _updatedAt_lt: BigInt
  _updatedAt_gte: BigInt
  _updatedAt_lte: BigInt
  _updatedAt_in: [BigInt!]
  _updatedAt_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bet_filter]
  or: [Bet_filter]
}

enum Bet_orderBy {
  id
  core
  type
  betId
  bettor
  owner
  actor
  affiliate
  _conditions
  _conditionIds
  rawAmount
  amount
  _tokenDecimals
  rawPotentialPayout
  potentialPayout
  rawPayout
  payout
  rawOdds
  odds
  _oddsDecimals
  rawSettledOdds
  settledOdds
  rawSettledMargin
  settledMargin
  _marginsForSettle
  approxSettledAt
  selections
  _games
  createdBlockNumber
  createdBlockTimestamp
  createdTxHash
  resolvedBlockNumber
  resolvedBlockTimestamp
  resolvedTxHash
  status
  result
  isRedeemable
  isRedeemed
  redeemedBlockNumber
  redeemedBlockTimestamp
  redeemedTxHash
  _subBetsCount
  _wonSubBetsCount
  _lostSubBetsCount
  _canceledSubBetsCount
  _isFreebet
  freebet
  _updatedAt
}

type Bettor {
  """
  Bettor entity Id - LP Contract address + affiliate address + bettor address
  """
  id: ID!
  address: String!
  affiliate: String!
  betsCount: Int!
  prematchBetsCount: Int!
  expressBetsCount: Int!
  liveBetsCount: Int!
  settledBetsCount: Int!
  wonBetsCount: Int!
  lostBetsCount: Int!
  canceledBetsCount: Int!
  redeemedBetsCount: Int!
  rawTurnover: BigInt!
  turnover: BigDecimal!
  rawInBets: BigInt!
  inBets: BigDecimal!
  rawToPayout: BigInt!
  toPayout: BigDecimal!
  rawTotalPayout: BigInt!
  totalPayout: BigDecimal!
  rawBiggestBetAmount: BigInt!
  biggestBetAmount: BigDecimal!
  rawBiggestPayout: BigInt!
  biggestPayout: BigDecimal!
  rawAvgBetAmount: BigInt!
  avgBetAmount: BigDecimal!
  rawTotalProfit: BigInt!
  totalProfit: BigDecimal!
  firstBetTimestamp: BigInt!
  lastBetTimestamp: BigInt!
  pnl: BigDecimal!
  _updatedAt: BigInt!
}

input Bettor_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  affiliate: String
  affiliate_not: String
  affiliate_gt: String
  affiliate_lt: String
  affiliate_gte: String
  affiliate_lte: String
  affiliate_in: [String!]
  affiliate_not_in: [String!]
  affiliate_contains: String
  affiliate_contains_nocase: String
  affiliate_not_contains: String
  affiliate_not_contains_nocase: String
  affiliate_starts_with: String
  affiliate_starts_with_nocase: String
  affiliate_not_starts_with: String
  affiliate_not_starts_with_nocase: String
  affiliate_ends_with: String
  affiliate_ends_with_nocase: String
  affiliate_not_ends_with: String
  affiliate_not_ends_with_nocase: String
  betsCount: Int
  betsCount_not: Int
  betsCount_gt: Int
  betsCount_lt: Int
  betsCount_gte: Int
  betsCount_lte: Int
  betsCount_in: [Int!]
  betsCount_not_in: [Int!]
  prematchBetsCount: Int
  prematchBetsCount_not: Int
  prematchBetsCount_gt: Int
  prematchBetsCount_lt: Int
  prematchBetsCount_gte: Int
  prematchBetsCount_lte: Int
  prematchBetsCount_in: [Int!]
  prematchBetsCount_not_in: [Int!]
  expressBetsCount: Int
  expressBetsCount_not: Int
  expressBetsCount_gt: Int
  expressBetsCount_lt: Int
  expressBetsCount_gte: Int
  expressBetsCount_lte: Int
  expressBetsCount_in: [Int!]
  expressBetsCount_not_in: [Int!]
  liveBetsCount: Int
  liveBetsCount_not: Int
  liveBetsCount_gt: Int
  liveBetsCount_lt: Int
  liveBetsCount_gte: Int
  liveBetsCount_lte: Int
  liveBetsCount_in: [Int!]
  liveBetsCount_not_in: [Int!]
  settledBetsCount: Int
  settledBetsCount_not: Int
  settledBetsCount_gt: Int
  settledBetsCount_lt: Int
  settledBetsCount_gte: Int
  settledBetsCount_lte: Int
  settledBetsCount_in: [Int!]
  settledBetsCount_not_in: [Int!]
  wonBetsCount: Int
  wonBetsCount_not: Int
  wonBetsCount_gt: Int
  wonBetsCount_lt: Int
  wonBetsCount_gte: Int
  wonBetsCount_lte: Int
  wonBetsCount_in: [Int!]
  wonBetsCount_not_in: [Int!]
  lostBetsCount: Int
  lostBetsCount_not: Int
  lostBetsCount_gt: Int
  lostBetsCount_lt: Int
  lostBetsCount_gte: Int
  lostBetsCount_lte: Int
  lostBetsCount_in: [Int!]
  lostBetsCount_not_in: [Int!]
  canceledBetsCount: Int
  canceledBetsCount_not: Int
  canceledBetsCount_gt: Int
  canceledBetsCount_lt: Int
  canceledBetsCount_gte: Int
  canceledBetsCount_lte: Int
  canceledBetsCount_in: [Int!]
  canceledBetsCount_not_in: [Int!]
  redeemedBetsCount: Int
  redeemedBetsCount_not: Int
  redeemedBetsCount_gt: Int
  redeemedBetsCount_lt: Int
  redeemedBetsCount_gte: Int
  redeemedBetsCount_lte: Int
  redeemedBetsCount_in: [Int!]
  redeemedBetsCount_not_in: [Int!]
  rawTurnover: BigInt
  rawTurnover_not: BigInt
  rawTurnover_gt: BigInt
  rawTurnover_lt: BigInt
  rawTurnover_gte: BigInt
  rawTurnover_lte: BigInt
  rawTurnover_in: [BigInt!]
  rawTurnover_not_in: [BigInt!]
  turnover: BigDecimal
  turnover_not: BigDecimal
  turnover_gt: BigDecimal
  turnover_lt: BigDecimal
  turnover_gte: BigDecimal
  turnover_lte: BigDecimal
  turnover_in: [BigDecimal!]
  turnover_not_in: [BigDecimal!]
  rawInBets: BigInt
  rawInBets_not: BigInt
  rawInBets_gt: BigInt
  rawInBets_lt: BigInt
  rawInBets_gte: BigInt
  rawInBets_lte: BigInt
  rawInBets_in: [BigInt!]
  rawInBets_not_in: [BigInt!]
  inBets: BigDecimal
  inBets_not: BigDecimal
  inBets_gt: BigDecimal
  inBets_lt: BigDecimal
  inBets_gte: BigDecimal
  inBets_lte: BigDecimal
  inBets_in: [BigDecimal!]
  inBets_not_in: [BigDecimal!]
  rawToPayout: BigInt
  rawToPayout_not: BigInt
  rawToPayout_gt: BigInt
  rawToPayout_lt: BigInt
  rawToPayout_gte: BigInt
  rawToPayout_lte: BigInt
  rawToPayout_in: [BigInt!]
  rawToPayout_not_in: [BigInt!]
  toPayout: BigDecimal
  toPayout_not: BigDecimal
  toPayout_gt: BigDecimal
  toPayout_lt: BigDecimal
  toPayout_gte: BigDecimal
  toPayout_lte: BigDecimal
  toPayout_in: [BigDecimal!]
  toPayout_not_in: [BigDecimal!]
  rawTotalPayout: BigInt
  rawTotalPayout_not: BigInt
  rawTotalPayout_gt: BigInt
  rawTotalPayout_lt: BigInt
  rawTotalPayout_gte: BigInt
  rawTotalPayout_lte: BigInt
  rawTotalPayout_in: [BigInt!]
  rawTotalPayout_not_in: [BigInt!]
  totalPayout: BigDecimal
  totalPayout_not: BigDecimal
  totalPayout_gt: BigDecimal
  totalPayout_lt: BigDecimal
  totalPayout_gte: BigDecimal
  totalPayout_lte: BigDecimal
  totalPayout_in: [BigDecimal!]
  totalPayout_not_in: [BigDecimal!]
  rawBiggestBetAmount: BigInt
  rawBiggestBetAmount_not: BigInt
  rawBiggestBetAmount_gt: BigInt
  rawBiggestBetAmount_lt: BigInt
  rawBiggestBetAmount_gte: BigInt
  rawBiggestBetAmount_lte: BigInt
  rawBiggestBetAmount_in: [BigInt!]
  rawBiggestBetAmount_not_in: [BigInt!]
  biggestBetAmount: BigDecimal
  biggestBetAmount_not: BigDecimal
  biggestBetAmount_gt: BigDecimal
  biggestBetAmount_lt: BigDecimal
  biggestBetAmount_gte: BigDecimal
  biggestBetAmount_lte: BigDecimal
  biggestBetAmount_in: [BigDecimal!]
  biggestBetAmount_not_in: [BigDecimal!]
  rawBiggestPayout: BigInt
  rawBiggestPayout_not: BigInt
  rawBiggestPayout_gt: BigInt
  rawBiggestPayout_lt: BigInt
  rawBiggestPayout_gte: BigInt
  rawBiggestPayout_lte: BigInt
  rawBiggestPayout_in: [BigInt!]
  rawBiggestPayout_not_in: [BigInt!]
  biggestPayout: BigDecimal
  biggestPayout_not: BigDecimal
  biggestPayout_gt: BigDecimal
  biggestPayout_lt: BigDecimal
  biggestPayout_gte: BigDecimal
  biggestPayout_lte: BigDecimal
  biggestPayout_in: [BigDecimal!]
  biggestPayout_not_in: [BigDecimal!]
  rawAvgBetAmount: BigInt
  rawAvgBetAmount_not: BigInt
  rawAvgBetAmount_gt: BigInt
  rawAvgBetAmount_lt: BigInt
  rawAvgBetAmount_gte: BigInt
  rawAvgBetAmount_lte: BigInt
  rawAvgBetAmount_in: [BigInt!]
  rawAvgBetAmount_not_in: [BigInt!]
  avgBetAmount: BigDecimal
  avgBetAmount_not: BigDecimal
  avgBetAmount_gt: BigDecimal
  avgBetAmount_lt: BigDecimal
  avgBetAmount_gte: BigDecimal
  avgBetAmount_lte: BigDecimal
  avgBetAmount_in: [BigDecimal!]
  avgBetAmount_not_in: [BigDecimal!]
  rawTotalProfit: BigInt
  rawTotalProfit_not: BigInt
  rawTotalProfit_gt: BigInt
  rawTotalProfit_lt: BigInt
  rawTotalProfit_gte: BigInt
  rawTotalProfit_lte: BigInt
  rawTotalProfit_in: [BigInt!]
  rawTotalProfit_not_in: [BigInt!]
  totalProfit: BigDecimal
  totalProfit_not: BigDecimal
  totalProfit_gt: BigDecimal
  totalProfit_lt: BigDecimal
  totalProfit_gte: BigDecimal
  totalProfit_lte: BigDecimal
  totalProfit_in: [BigDecimal!]
  totalProfit_not_in: [BigDecimal!]
  firstBetTimestamp: BigInt
  firstBetTimestamp_not: BigInt
  firstBetTimestamp_gt: BigInt
  firstBetTimestamp_lt: BigInt
  firstBetTimestamp_gte: BigInt
  firstBetTimestamp_lte: BigInt
  firstBetTimestamp_in: [BigInt!]
  firstBetTimestamp_not_in: [BigInt!]
  lastBetTimestamp: BigInt
  lastBetTimestamp_not: BigInt
  lastBetTimestamp_gt: BigInt
  lastBetTimestamp_lt: BigInt
  lastBetTimestamp_gte: BigInt
  lastBetTimestamp_lte: BigInt
  lastBetTimestamp_in: [BigInt!]
  lastBetTimestamp_not_in: [BigInt!]
  pnl: BigDecimal
  pnl_not: BigDecimal
  pnl_gt: BigDecimal
  pnl_lt: BigDecimal
  pnl_gte: BigDecimal
  pnl_lte: BigDecimal
  pnl_in: [BigDecimal!]
  pnl_not_in: [BigDecimal!]
  _updatedAt: BigInt
  _updatedAt_not: BigInt
  _updatedAt_gt: BigInt
  _updatedAt_lt: BigInt
  _updatedAt_gte: BigInt
  _updatedAt_lte: BigInt
  _updatedAt_in: [BigInt!]
  _updatedAt_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bettor_filter]
  or: [Bettor_filter]
}

enum Bettor_orderBy {
  id
  address
  affiliate
  betsCount
  prematchBetsCount
  expressBetsCount
  liveBetsCount
  settledBetsCount
  wonBetsCount
  lostBetsCount
  canceledBetsCount
  redeemedBetsCount
  rawTurnover
  turnover
  rawInBets
  inBets
  rawToPayout
  toPayout
  rawTotalPayout
  totalPayout
  rawBiggestBetAmount
  biggestBetAmount
  rawBiggestPayout
  biggestPayout
  rawAvgBetAmount
  avgBetAmount
  rawTotalProfit
  totalProfit
  firstBetTimestamp
  lastBetTimestamp
  pnl
  _updatedAt
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Condition {
  """Core Contract address + Condition Id"""
  id: ID!
  title: String
  core: CoreContract!
  coreAddress: String!
  conditionId: BigInt!
  game: Game!
  outcomes(skip: Int = 0, first: Int = 100, orderBy: Outcome_orderBy, orderDirection: OrderDirection, where: Outcome_filter): [Outcome!]!
  outcomesIds: [BigInt!]
  wonOutcomes(skip: Int = 0, first: Int = 100, orderBy: Outcome_orderBy, orderDirection: OrderDirection, where: Outcome_filter): [Outcome!]
  wonOutcomeIds: [BigInt!]
  margin: BigInt!
  reinforcement: BigInt!
  status: ConditionStatus!
  turnover: BigInt!
  provider: BigInt!
  createdBlockNumber: BigInt!
  createdBlockTimestamp: BigInt!
  createdTxHash: String!
  resolvedBlockNumber: BigInt
  resolvedBlockTimestamp: BigInt
  resolvedTxHash: String
  internalStartsAt: BigInt
  isExpressForbidden: Boolean!
  _updatedAt: BigInt!
  _winningOutcomesCount: Int!
}

enum ConditionStatus {
  Created
  Resolved
  Canceled
  Paused
}

input Condition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  core: String
  core_not: String
  core_gt: String
  core_lt: String
  core_gte: String
  core_lte: String
  core_in: [String!]
  core_not_in: [String!]
  core_contains: String
  core_contains_nocase: String
  core_not_contains: String
  core_not_contains_nocase: String
  core_starts_with: String
  core_starts_with_nocase: String
  core_not_starts_with: String
  core_not_starts_with_nocase: String
  core_ends_with: String
  core_ends_with_nocase: String
  core_not_ends_with: String
  core_not_ends_with_nocase: String
  core_: CoreContract_filter
  coreAddress: String
  coreAddress_not: String
  coreAddress_gt: String
  coreAddress_lt: String
  coreAddress_gte: String
  coreAddress_lte: String
  coreAddress_in: [String!]
  coreAddress_not_in: [String!]
  coreAddress_contains: String
  coreAddress_contains_nocase: String
  coreAddress_not_contains: String
  coreAddress_not_contains_nocase: String
  coreAddress_starts_with: String
  coreAddress_starts_with_nocase: String
  coreAddress_not_starts_with: String
  coreAddress_not_starts_with_nocase: String
  coreAddress_ends_with: String
  coreAddress_ends_with_nocase: String
  coreAddress_not_ends_with: String
  coreAddress_not_ends_with_nocase: String
  conditionId: BigInt
  conditionId_not: BigInt
  conditionId_gt: BigInt
  conditionId_lt: BigInt
  conditionId_gte: BigInt
  conditionId_lte: BigInt
  conditionId_in: [BigInt!]
  conditionId_not_in: [BigInt!]
  game: String
  game_not: String
  game_gt: String
  game_lt: String
  game_gte: String
  game_lte: String
  game_in: [String!]
  game_not_in: [String!]
  game_contains: String
  game_contains_nocase: String
  game_not_contains: String
  game_not_contains_nocase: String
  game_starts_with: String
  game_starts_with_nocase: String
  game_not_starts_with: String
  game_not_starts_with_nocase: String
  game_ends_with: String
  game_ends_with_nocase: String
  game_not_ends_with: String
  game_not_ends_with_nocase: String
  game_: Game_filter
  outcomes_: Outcome_filter
  outcomesIds: [BigInt!]
  outcomesIds_not: [BigInt!]
  outcomesIds_contains: [BigInt!]
  outcomesIds_contains_nocase: [BigInt!]
  outcomesIds_not_contains: [BigInt!]
  outcomesIds_not_contains_nocase: [BigInt!]
  wonOutcomes: [String!]
  wonOutcomes_not: [String!]
  wonOutcomes_contains: [String!]
  wonOutcomes_contains_nocase: [String!]
  wonOutcomes_not_contains: [String!]
  wonOutcomes_not_contains_nocase: [String!]
  wonOutcomes_: Outcome_filter
  wonOutcomeIds: [BigInt!]
  wonOutcomeIds_not: [BigInt!]
  wonOutcomeIds_contains: [BigInt!]
  wonOutcomeIds_contains_nocase: [BigInt!]
  wonOutcomeIds_not_contains: [BigInt!]
  wonOutcomeIds_not_contains_nocase: [BigInt!]
  margin: BigInt
  margin_not: BigInt
  margin_gt: BigInt
  margin_lt: BigInt
  margin_gte: BigInt
  margin_lte: BigInt
  margin_in: [BigInt!]
  margin_not_in: [BigInt!]
  reinforcement: BigInt
  reinforcement_not: BigInt
  reinforcement_gt: BigInt
  reinforcement_lt: BigInt
  reinforcement_gte: BigInt
  reinforcement_lte: BigInt
  reinforcement_in: [BigInt!]
  reinforcement_not_in: [BigInt!]
  status: ConditionStatus
  status_not: ConditionStatus
  status_in: [ConditionStatus!]
  status_not_in: [ConditionStatus!]
  turnover: BigInt
  turnover_not: BigInt
  turnover_gt: BigInt
  turnover_lt: BigInt
  turnover_gte: BigInt
  turnover_lte: BigInt
  turnover_in: [BigInt!]
  turnover_not_in: [BigInt!]
  provider: BigInt
  provider_not: BigInt
  provider_gt: BigInt
  provider_lt: BigInt
  provider_gte: BigInt
  provider_lte: BigInt
  provider_in: [BigInt!]
  provider_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  createdBlockTimestamp: BigInt
  createdBlockTimestamp_not: BigInt
  createdBlockTimestamp_gt: BigInt
  createdBlockTimestamp_lt: BigInt
  createdBlockTimestamp_gte: BigInt
  createdBlockTimestamp_lte: BigInt
  createdBlockTimestamp_in: [BigInt!]
  createdBlockTimestamp_not_in: [BigInt!]
  createdTxHash: String
  createdTxHash_not: String
  createdTxHash_gt: String
  createdTxHash_lt: String
  createdTxHash_gte: String
  createdTxHash_lte: String
  createdTxHash_in: [String!]
  createdTxHash_not_in: [String!]
  createdTxHash_contains: String
  createdTxHash_contains_nocase: String
  createdTxHash_not_contains: String
  createdTxHash_not_contains_nocase: String
  createdTxHash_starts_with: String
  createdTxHash_starts_with_nocase: String
  createdTxHash_not_starts_with: String
  createdTxHash_not_starts_with_nocase: String
  createdTxHash_ends_with: String
  createdTxHash_ends_with_nocase: String
  createdTxHash_not_ends_with: String
  createdTxHash_not_ends_with_nocase: String
  resolvedBlockNumber: BigInt
  resolvedBlockNumber_not: BigInt
  resolvedBlockNumber_gt: BigInt
  resolvedBlockNumber_lt: BigInt
  resolvedBlockNumber_gte: BigInt
  resolvedBlockNumber_lte: BigInt
  resolvedBlockNumber_in: [BigInt!]
  resolvedBlockNumber_not_in: [BigInt!]
  resolvedBlockTimestamp: BigInt
  resolvedBlockTimestamp_not: BigInt
  resolvedBlockTimestamp_gt: BigInt
  resolvedBlockTimestamp_lt: BigInt
  resolvedBlockTimestamp_gte: BigInt
  resolvedBlockTimestamp_lte: BigInt
  resolvedBlockTimestamp_in: [BigInt!]
  resolvedBlockTimestamp_not_in: [BigInt!]
  resolvedTxHash: String
  resolvedTxHash_not: String
  resolvedTxHash_gt: String
  resolvedTxHash_lt: String
  resolvedTxHash_gte: String
  resolvedTxHash_lte: String
  resolvedTxHash_in: [String!]
  resolvedTxHash_not_in: [String!]
  resolvedTxHash_contains: String
  resolvedTxHash_contains_nocase: String
  resolvedTxHash_not_contains: String
  resolvedTxHash_not_contains_nocase: String
  resolvedTxHash_starts_with: String
  resolvedTxHash_starts_with_nocase: String
  resolvedTxHash_not_starts_with: String
  resolvedTxHash_not_starts_with_nocase: String
  resolvedTxHash_ends_with: String
  resolvedTxHash_ends_with_nocase: String
  resolvedTxHash_not_ends_with: String
  resolvedTxHash_not_ends_with_nocase: String
  internalStartsAt: BigInt
  internalStartsAt_not: BigInt
  internalStartsAt_gt: BigInt
  internalStartsAt_lt: BigInt
  internalStartsAt_gte: BigInt
  internalStartsAt_lte: BigInt
  internalStartsAt_in: [BigInt!]
  internalStartsAt_not_in: [BigInt!]
  isExpressForbidden: Boolean
  isExpressForbidden_not: Boolean
  isExpressForbidden_in: [Boolean!]
  isExpressForbidden_not_in: [Boolean!]
  _updatedAt: BigInt
  _updatedAt_not: BigInt
  _updatedAt_gt: BigInt
  _updatedAt_lt: BigInt
  _updatedAt_gte: BigInt
  _updatedAt_lte: BigInt
  _updatedAt_in: [BigInt!]
  _updatedAt_not_in: [BigInt!]
  _winningOutcomesCount: Int
  _winningOutcomesCount_not: Int
  _winningOutcomesCount_gt: Int
  _winningOutcomesCount_lt: Int
  _winningOutcomesCount_gte: Int
  _winningOutcomesCount_lte: Int
  _winningOutcomesCount_in: [Int!]
  _winningOutcomesCount_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Condition_filter]
  or: [Condition_filter]
}

enum Condition_orderBy {
  id
  title
  core
  coreAddress
  conditionId
  game
  outcomes
  outcomesIds
  wonOutcomes
  wonOutcomeIds
  margin
  reinforcement
  status
  turnover
  provider
  createdBlockNumber
  createdBlockTimestamp
  createdTxHash
  resolvedBlockNumber
  resolvedBlockTimestamp
  resolvedTxHash
  internalStartsAt
  isExpressForbidden
  _updatedAt
  _winningOutcomesCount
}

type CoreContract {
  id: ID!
  liquidityPool: LiquidityPoolContract!
  address: String!
  type: String!
}

input CoreContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPool: String
  liquidityPool_not: String
  liquidityPool_gt: String
  liquidityPool_lt: String
  liquidityPool_gte: String
  liquidityPool_lte: String
  liquidityPool_in: [String!]
  liquidityPool_not_in: [String!]
  liquidityPool_contains: String
  liquidityPool_contains_nocase: String
  liquidityPool_not_contains: String
  liquidityPool_not_contains_nocase: String
  liquidityPool_starts_with: String
  liquidityPool_starts_with_nocase: String
  liquidityPool_not_starts_with: String
  liquidityPool_not_starts_with_nocase: String
  liquidityPool_ends_with: String
  liquidityPool_ends_with_nocase: String
  liquidityPool_not_ends_with: String
  liquidityPool_not_ends_with_nocase: String
  liquidityPool_: LiquidityPoolContract_filter
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CoreContract_filter]
  or: [CoreContract_filter]
}

enum CoreContract_orderBy {
  id
  liquidityPool
  address
  type
}

type Country {
  id: ID!
  name: String!
  slug: String!
  sport: Sport!
  leagues(skip: Int = 0, first: Int = 100, orderBy: League_orderBy, orderDirection: OrderDirection, where: League_filter): [League!]!
  hasActiveLeagues: Boolean!
  activeLeaguesEntityIds: [String!]
  turnover: BigInt!
}

input Country_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  sport: String
  sport_not: String
  sport_gt: String
  sport_lt: String
  sport_gte: String
  sport_lte: String
  sport_in: [String!]
  sport_not_in: [String!]
  sport_contains: String
  sport_contains_nocase: String
  sport_not_contains: String
  sport_not_contains_nocase: String
  sport_starts_with: String
  sport_starts_with_nocase: String
  sport_not_starts_with: String
  sport_not_starts_with_nocase: String
  sport_ends_with: String
  sport_ends_with_nocase: String
  sport_not_ends_with: String
  sport_not_ends_with_nocase: String
  sport_: Sport_filter
  leagues_: League_filter
  hasActiveLeagues: Boolean
  hasActiveLeagues_not: Boolean
  hasActiveLeagues_in: [Boolean!]
  hasActiveLeagues_not_in: [Boolean!]
  activeLeaguesEntityIds: [String!]
  activeLeaguesEntityIds_not: [String!]
  activeLeaguesEntityIds_contains: [String!]
  activeLeaguesEntityIds_contains_nocase: [String!]
  activeLeaguesEntityIds_not_contains: [String!]
  activeLeaguesEntityIds_not_contains_nocase: [String!]
  turnover: BigInt
  turnover_not: BigInt
  turnover_gt: BigInt
  turnover_lt: BigInt
  turnover_gte: BigInt
  turnover_lte: BigInt
  turnover_in: [BigInt!]
  turnover_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Country_filter]
  or: [Country_filter]
}

enum Country_orderBy {
  id
  name
  slug
  sport
  leagues
  hasActiveLeagues
  activeLeaguesEntityIds
  turnover
}

type Event {
  id: ID!
  contractAddress: String!
  name: EventName!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
  sortOrder: BigInt!
  betId: String
  conditionId: String
  gameId: String
  freebetId: String
  depositId: String
  affiliate: String
  gasPrice: BigInt!
  gasUsed: BigInt
}

enum EventName {
  NewGame
  GameShifted
  BettorWin
  ConditionCreated
  ConditionResolved
  ConditionShifted
  ConditionStopped
  NewBet
  NewLiveBet
  BetSettled
  LiveBetSettled
  FreeBetMinted
  FreeBetReissued
  FreeBetRedeemed
  FreeBetBettorWin
  FreeBetTransfer
  LiquidityAdded
  LiquidityRemoved
  LiquidityTransfer
  AzuroBetTransfer
  MarginChanged
  ReinforcementChanged
}

input Event_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contractAddress: String
  contractAddress_not: String
  contractAddress_gt: String
  contractAddress_lt: String
  contractAddress_gte: String
  contractAddress_lte: String
  contractAddress_in: [String!]
  contractAddress_not_in: [String!]
  contractAddress_contains: String
  contractAddress_contains_nocase: String
  contractAddress_not_contains: String
  contractAddress_not_contains_nocase: String
  contractAddress_starts_with: String
  contractAddress_starts_with_nocase: String
  contractAddress_not_starts_with: String
  contractAddress_not_starts_with_nocase: String
  contractAddress_ends_with: String
  contractAddress_ends_with_nocase: String
  contractAddress_not_ends_with: String
  contractAddress_not_ends_with_nocase: String
  name: EventName
  name_not: EventName
  name_in: [EventName!]
  name_not_in: [EventName!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  txHash: String
  txHash_not: String
  txHash_gt: String
  txHash_lt: String
  txHash_gte: String
  txHash_lte: String
  txHash_in: [String!]
  txHash_not_in: [String!]
  txHash_contains: String
  txHash_contains_nocase: String
  txHash_not_contains: String
  txHash_not_contains_nocase: String
  txHash_starts_with: String
  txHash_starts_with_nocase: String
  txHash_not_starts_with: String
  txHash_not_starts_with_nocase: String
  txHash_ends_with: String
  txHash_ends_with_nocase: String
  txHash_not_ends_with: String
  txHash_not_ends_with_nocase: String
  transactionIndex: BigInt
  transactionIndex_not: BigInt
  transactionIndex_gt: BigInt
  transactionIndex_lt: BigInt
  transactionIndex_gte: BigInt
  transactionIndex_lte: BigInt
  transactionIndex_in: [BigInt!]
  transactionIndex_not_in: [BigInt!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  sortOrder: BigInt
  sortOrder_not: BigInt
  sortOrder_gt: BigInt
  sortOrder_lt: BigInt
  sortOrder_gte: BigInt
  sortOrder_lte: BigInt
  sortOrder_in: [BigInt!]
  sortOrder_not_in: [BigInt!]
  betId: String
  betId_not: String
  betId_gt: String
  betId_lt: String
  betId_gte: String
  betId_lte: String
  betId_in: [String!]
  betId_not_in: [String!]
  betId_contains: String
  betId_contains_nocase: String
  betId_not_contains: String
  betId_not_contains_nocase: String
  betId_starts_with: String
  betId_starts_with_nocase: String
  betId_not_starts_with: String
  betId_not_starts_with_nocase: String
  betId_ends_with: String
  betId_ends_with_nocase: String
  betId_not_ends_with: String
  betId_not_ends_with_nocase: String
  conditionId: String
  conditionId_not: String
  conditionId_gt: String
  conditionId_lt: String
  conditionId_gte: String
  conditionId_lte: String
  conditionId_in: [String!]
  conditionId_not_in: [String!]
  conditionId_contains: String
  conditionId_contains_nocase: String
  conditionId_not_contains: String
  conditionId_not_contains_nocase: String
  conditionId_starts_with: String
  conditionId_starts_with_nocase: String
  conditionId_not_starts_with: String
  conditionId_not_starts_with_nocase: String
  conditionId_ends_with: String
  conditionId_ends_with_nocase: String
  conditionId_not_ends_with: String
  conditionId_not_ends_with_nocase: String
  gameId: String
  gameId_not: String
  gameId_gt: String
  gameId_lt: String
  gameId_gte: String
  gameId_lte: String
  gameId_in: [String!]
  gameId_not_in: [String!]
  gameId_contains: String
  gameId_contains_nocase: String
  gameId_not_contains: String
  gameId_not_contains_nocase: String
  gameId_starts_with: String
  gameId_starts_with_nocase: String
  gameId_not_starts_with: String
  gameId_not_starts_with_nocase: String
  gameId_ends_with: String
  gameId_ends_with_nocase: String
  gameId_not_ends_with: String
  gameId_not_ends_with_nocase: String
  freebetId: String
  freebetId_not: String
  freebetId_gt: String
  freebetId_lt: String
  freebetId_gte: String
  freebetId_lte: String
  freebetId_in: [String!]
  freebetId_not_in: [String!]
  freebetId_contains: String
  freebetId_contains_nocase: String
  freebetId_not_contains: String
  freebetId_not_contains_nocase: String
  freebetId_starts_with: String
  freebetId_starts_with_nocase: String
  freebetId_not_starts_with: String
  freebetId_not_starts_with_nocase: String
  freebetId_ends_with: String
  freebetId_ends_with_nocase: String
  freebetId_not_ends_with: String
  freebetId_not_ends_with_nocase: String
  depositId: String
  depositId_not: String
  depositId_gt: String
  depositId_lt: String
  depositId_gte: String
  depositId_lte: String
  depositId_in: [String!]
  depositId_not_in: [String!]
  depositId_contains: String
  depositId_contains_nocase: String
  depositId_not_contains: String
  depositId_not_contains_nocase: String
  depositId_starts_with: String
  depositId_starts_with_nocase: String
  depositId_not_starts_with: String
  depositId_not_starts_with_nocase: String
  depositId_ends_with: String
  depositId_ends_with_nocase: String
  depositId_not_ends_with: String
  depositId_not_ends_with_nocase: String
  affiliate: String
  affiliate_not: String
  affiliate_gt: String
  affiliate_lt: String
  affiliate_gte: String
  affiliate_lte: String
  affiliate_in: [String!]
  affiliate_not_in: [String!]
  affiliate_contains: String
  affiliate_contains_nocase: String
  affiliate_not_contains: String
  affiliate_not_contains_nocase: String
  affiliate_starts_with: String
  affiliate_starts_with_nocase: String
  affiliate_not_starts_with: String
  affiliate_not_starts_with_nocase: String
  affiliate_ends_with: String
  affiliate_ends_with_nocase: String
  affiliate_not_ends_with: String
  affiliate_not_ends_with_nocase: String
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Event_filter]
  or: [Event_filter]
}

enum Event_orderBy {
  id
  contractAddress
  name
  blockNumber
  blockTimestamp
  txHash
  transactionIndex
  logIndex
  sortOrder
  betId
  conditionId
  gameId
  freebetId
  depositId
  affiliate
  gasPrice
  gasUsed
}

type ExpressPrematchRelation {
  """Express (core) contract address"""
  id: ID!
  prematchAddress: String!
}

input ExpressPrematchRelation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  prematchAddress: String
  prematchAddress_not: String
  prematchAddress_gt: String
  prematchAddress_lt: String
  prematchAddress_gte: String
  prematchAddress_lte: String
  prematchAddress_in: [String!]
  prematchAddress_not_in: [String!]
  prematchAddress_contains: String
  prematchAddress_contains_nocase: String
  prematchAddress_not_contains: String
  prematchAddress_not_contains_nocase: String
  prematchAddress_starts_with: String
  prematchAddress_starts_with_nocase: String
  prematchAddress_not_starts_with: String
  prematchAddress_not_starts_with_nocase: String
  prematchAddress_ends_with: String
  prematchAddress_ends_with_nocase: String
  prematchAddress_not_ends_with: String
  prematchAddress_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ExpressPrematchRelation_filter]
  or: [ExpressPrematchRelation_filter]
}

enum ExpressPrematchRelation_orderBy {
  id
  prematchAddress
}

type Freebet {
  """Freebet Contract address + Freebet Id"""
  id: ID!
  owner: String!
  freebetContractAddress: String!
  freebetContractName: String
  freebetContractAffiliate: String
  freebet: FreebetContract!
  azuroBetId: BigInt
  core: CoreContract
  freebetId: BigInt!
  status: FreebetStatus!
  expiresAt: BigInt!
  amount: BigDecimal!
  rawAmount: BigInt!
  tokenDecimals: Int!
  durationTime: BigInt!
  rawMinOdds: BigInt!
  minOdds: BigDecimal!
  createdBlockNumber: BigInt!
  createdBlockTimestamp: BigInt!
  createdTxHash: String!
  isResolved: Boolean!
  burned: Boolean!
  _updatedAt: BigInt!
}

type FreebetContract {
  id: ID!
  liquidityPool: LiquidityPoolContract!
  address: String!
  name: String
  affiliate: String
  manager: String
}

input FreebetContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPool: String
  liquidityPool_not: String
  liquidityPool_gt: String
  liquidityPool_lt: String
  liquidityPool_gte: String
  liquidityPool_lte: String
  liquidityPool_in: [String!]
  liquidityPool_not_in: [String!]
  liquidityPool_contains: String
  liquidityPool_contains_nocase: String
  liquidityPool_not_contains: String
  liquidityPool_not_contains_nocase: String
  liquidityPool_starts_with: String
  liquidityPool_starts_with_nocase: String
  liquidityPool_not_starts_with: String
  liquidityPool_not_starts_with_nocase: String
  liquidityPool_ends_with: String
  liquidityPool_ends_with_nocase: String
  liquidityPool_not_ends_with: String
  liquidityPool_not_ends_with_nocase: String
  liquidityPool_: LiquidityPoolContract_filter
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  affiliate: String
  affiliate_not: String
  affiliate_gt: String
  affiliate_lt: String
  affiliate_gte: String
  affiliate_lte: String
  affiliate_in: [String!]
  affiliate_not_in: [String!]
  affiliate_contains: String
  affiliate_contains_nocase: String
  affiliate_not_contains: String
  affiliate_not_contains_nocase: String
  affiliate_starts_with: String
  affiliate_starts_with_nocase: String
  affiliate_not_starts_with: String
  affiliate_not_starts_with_nocase: String
  affiliate_ends_with: String
  affiliate_ends_with_nocase: String
  affiliate_not_ends_with: String
  affiliate_not_ends_with_nocase: String
  manager: String
  manager_not: String
  manager_gt: String
  manager_lt: String
  manager_gte: String
  manager_lte: String
  manager_in: [String!]
  manager_not_in: [String!]
  manager_contains: String
  manager_contains_nocase: String
  manager_not_contains: String
  manager_not_contains_nocase: String
  manager_starts_with: String
  manager_starts_with_nocase: String
  manager_not_starts_with: String
  manager_not_starts_with_nocase: String
  manager_ends_with: String
  manager_ends_with_nocase: String
  manager_not_ends_with: String
  manager_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FreebetContract_filter]
  or: [FreebetContract_filter]
}

enum FreebetContract_orderBy {
  id
  liquidityPool
  address
  name
  affiliate
  manager
}

enum FreebetStatus {
  Created
  Reissued
  Redeemed
  Withdrawn
}

input Freebet_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  freebetContractAddress: String
  freebetContractAddress_not: String
  freebetContractAddress_gt: String
  freebetContractAddress_lt: String
  freebetContractAddress_gte: String
  freebetContractAddress_lte: String
  freebetContractAddress_in: [String!]
  freebetContractAddress_not_in: [String!]
  freebetContractAddress_contains: String
  freebetContractAddress_contains_nocase: String
  freebetContractAddress_not_contains: String
  freebetContractAddress_not_contains_nocase: String
  freebetContractAddress_starts_with: String
  freebetContractAddress_starts_with_nocase: String
  freebetContractAddress_not_starts_with: String
  freebetContractAddress_not_starts_with_nocase: String
  freebetContractAddress_ends_with: String
  freebetContractAddress_ends_with_nocase: String
  freebetContractAddress_not_ends_with: String
  freebetContractAddress_not_ends_with_nocase: String
  freebetContractName: String
  freebetContractName_not: String
  freebetContractName_gt: String
  freebetContractName_lt: String
  freebetContractName_gte: String
  freebetContractName_lte: String
  freebetContractName_in: [String!]
  freebetContractName_not_in: [String!]
  freebetContractName_contains: String
  freebetContractName_contains_nocase: String
  freebetContractName_not_contains: String
  freebetContractName_not_contains_nocase: String
  freebetContractName_starts_with: String
  freebetContractName_starts_with_nocase: String
  freebetContractName_not_starts_with: String
  freebetContractName_not_starts_with_nocase: String
  freebetContractName_ends_with: String
  freebetContractName_ends_with_nocase: String
  freebetContractName_not_ends_with: String
  freebetContractName_not_ends_with_nocase: String
  freebetContractAffiliate: String
  freebetContractAffiliate_not: String
  freebetContractAffiliate_gt: String
  freebetContractAffiliate_lt: String
  freebetContractAffiliate_gte: String
  freebetContractAffiliate_lte: String
  freebetContractAffiliate_in: [String!]
  freebetContractAffiliate_not_in: [String!]
  freebetContractAffiliate_contains: String
  freebetContractAffiliate_contains_nocase: String
  freebetContractAffiliate_not_contains: String
  freebetContractAffiliate_not_contains_nocase: String
  freebetContractAffiliate_starts_with: String
  freebetContractAffiliate_starts_with_nocase: String
  freebetContractAffiliate_not_starts_with: String
  freebetContractAffiliate_not_starts_with_nocase: String
  freebetContractAffiliate_ends_with: String
  freebetContractAffiliate_ends_with_nocase: String
  freebetContractAffiliate_not_ends_with: String
  freebetContractAffiliate_not_ends_with_nocase: String
  freebet: String
  freebet_not: String
  freebet_gt: String
  freebet_lt: String
  freebet_gte: String
  freebet_lte: String
  freebet_in: [String!]
  freebet_not_in: [String!]
  freebet_contains: String
  freebet_contains_nocase: String
  freebet_not_contains: String
  freebet_not_contains_nocase: String
  freebet_starts_with: String
  freebet_starts_with_nocase: String
  freebet_not_starts_with: String
  freebet_not_starts_with_nocase: String
  freebet_ends_with: String
  freebet_ends_with_nocase: String
  freebet_not_ends_with: String
  freebet_not_ends_with_nocase: String
  freebet_: FreebetContract_filter
  azuroBetId: BigInt
  azuroBetId_not: BigInt
  azuroBetId_gt: BigInt
  azuroBetId_lt: BigInt
  azuroBetId_gte: BigInt
  azuroBetId_lte: BigInt
  azuroBetId_in: [BigInt!]
  azuroBetId_not_in: [BigInt!]
  core: String
  core_not: String
  core_gt: String
  core_lt: String
  core_gte: String
  core_lte: String
  core_in: [String!]
  core_not_in: [String!]
  core_contains: String
  core_contains_nocase: String
  core_not_contains: String
  core_not_contains_nocase: String
  core_starts_with: String
  core_starts_with_nocase: String
  core_not_starts_with: String
  core_not_starts_with_nocase: String
  core_ends_with: String
  core_ends_with_nocase: String
  core_not_ends_with: String
  core_not_ends_with_nocase: String
  core_: CoreContract_filter
  freebetId: BigInt
  freebetId_not: BigInt
  freebetId_gt: BigInt
  freebetId_lt: BigInt
  freebetId_gte: BigInt
  freebetId_lte: BigInt
  freebetId_in: [BigInt!]
  freebetId_not_in: [BigInt!]
  status: FreebetStatus
  status_not: FreebetStatus
  status_in: [FreebetStatus!]
  status_not_in: [FreebetStatus!]
  expiresAt: BigInt
  expiresAt_not: BigInt
  expiresAt_gt: BigInt
  expiresAt_lt: BigInt
  expiresAt_gte: BigInt
  expiresAt_lte: BigInt
  expiresAt_in: [BigInt!]
  expiresAt_not_in: [BigInt!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  rawAmount: BigInt
  rawAmount_not: BigInt
  rawAmount_gt: BigInt
  rawAmount_lt: BigInt
  rawAmount_gte: BigInt
  rawAmount_lte: BigInt
  rawAmount_in: [BigInt!]
  rawAmount_not_in: [BigInt!]
  tokenDecimals: Int
  tokenDecimals_not: Int
  tokenDecimals_gt: Int
  tokenDecimals_lt: Int
  tokenDecimals_gte: Int
  tokenDecimals_lte: Int
  tokenDecimals_in: [Int!]
  tokenDecimals_not_in: [Int!]
  durationTime: BigInt
  durationTime_not: BigInt
  durationTime_gt: BigInt
  durationTime_lt: BigInt
  durationTime_gte: BigInt
  durationTime_lte: BigInt
  durationTime_in: [BigInt!]
  durationTime_not_in: [BigInt!]
  rawMinOdds: BigInt
  rawMinOdds_not: BigInt
  rawMinOdds_gt: BigInt
  rawMinOdds_lt: BigInt
  rawMinOdds_gte: BigInt
  rawMinOdds_lte: BigInt
  rawMinOdds_in: [BigInt!]
  rawMinOdds_not_in: [BigInt!]
  minOdds: BigDecimal
  minOdds_not: BigDecimal
  minOdds_gt: BigDecimal
  minOdds_lt: BigDecimal
  minOdds_gte: BigDecimal
  minOdds_lte: BigDecimal
  minOdds_in: [BigDecimal!]
  minOdds_not_in: [BigDecimal!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  createdBlockTimestamp: BigInt
  createdBlockTimestamp_not: BigInt
  createdBlockTimestamp_gt: BigInt
  createdBlockTimestamp_lt: BigInt
  createdBlockTimestamp_gte: BigInt
  createdBlockTimestamp_lte: BigInt
  createdBlockTimestamp_in: [BigInt!]
  createdBlockTimestamp_not_in: [BigInt!]
  createdTxHash: String
  createdTxHash_not: String
  createdTxHash_gt: String
  createdTxHash_lt: String
  createdTxHash_gte: String
  createdTxHash_lte: String
  createdTxHash_in: [String!]
  createdTxHash_not_in: [String!]
  createdTxHash_contains: String
  createdTxHash_contains_nocase: String
  createdTxHash_not_contains: String
  createdTxHash_not_contains_nocase: String
  createdTxHash_starts_with: String
  createdTxHash_starts_with_nocase: String
  createdTxHash_not_starts_with: String
  createdTxHash_not_starts_with_nocase: String
  createdTxHash_ends_with: String
  createdTxHash_ends_with_nocase: String
  createdTxHash_not_ends_with: String
  createdTxHash_not_ends_with_nocase: String
  isResolved: Boolean
  isResolved_not: Boolean
  isResolved_in: [Boolean!]
  isResolved_not_in: [Boolean!]
  burned: Boolean
  burned_not: Boolean
  burned_in: [Boolean!]
  burned_not_in: [Boolean!]
  _updatedAt: BigInt
  _updatedAt_not: BigInt
  _updatedAt_gt: BigInt
  _updatedAt_lt: BigInt
  _updatedAt_gte: BigInt
  _updatedAt_lte: BigInt
  _updatedAt_in: [BigInt!]
  _updatedAt_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Freebet_filter]
  or: [Freebet_filter]
}

enum Freebet_orderBy {
  id
  owner
  freebetContractAddress
  freebetContractName
  freebetContractAffiliate
  freebet
  azuroBetId
  core
  freebetId
  status
  expiresAt
  amount
  rawAmount
  tokenDecimals
  durationTime
  rawMinOdds
  minOdds
  createdBlockNumber
  createdBlockTimestamp
  createdTxHash
  isResolved
  burned
  _updatedAt
}

type Game {
  """LP Contract address + Game Id"""
  id: ID!
  liquidityPool: LiquidityPoolContract!
  gameId: BigInt!
  title: String
  slug: String
  league: League!
  sport: Sport!
  status: GameStatus!
  participants(skip: Int = 0, first: Int = 100, orderBy: Participant_orderBy, orderDirection: OrderDirection, where: Participant_filter): [Participant!]!
  conditions(skip: Int = 0, first: Int = 100, orderBy: Condition_orderBy, orderDirection: OrderDirection, where: Condition_filter): [Condition!]!
  hasActiveConditions: Boolean!
  _activeConditionsEntityIds: [String!]
  _resolvedConditionsEntityIds: [String!]
  _canceledConditionsEntityIds: [String!]
  _pausedConditionsEntityIds: [String!]
  startsAt: BigInt!
  provider: BigInt!
  turnover: BigInt!
  createdBlockNumber: BigInt!
  createdBlockTimestamp: BigInt!
  createdTxHash: String!
  shiftedBlockNumber: BigInt
  shiftedBlockTimestamp: BigInt
  shiftedTxHash: String
  resolvedBlockNumber: BigInt
  resolvedBlockTimestamp: BigInt
  resolvedTxHash: String
  _updatedAt: BigInt!
}

enum GameStatus {
  Created
  Resolved
  Canceled
  Paused
}

input Game_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPool: String
  liquidityPool_not: String
  liquidityPool_gt: String
  liquidityPool_lt: String
  liquidityPool_gte: String
  liquidityPool_lte: String
  liquidityPool_in: [String!]
  liquidityPool_not_in: [String!]
  liquidityPool_contains: String
  liquidityPool_contains_nocase: String
  liquidityPool_not_contains: String
  liquidityPool_not_contains_nocase: String
  liquidityPool_starts_with: String
  liquidityPool_starts_with_nocase: String
  liquidityPool_not_starts_with: String
  liquidityPool_not_starts_with_nocase: String
  liquidityPool_ends_with: String
  liquidityPool_ends_with_nocase: String
  liquidityPool_not_ends_with: String
  liquidityPool_not_ends_with_nocase: String
  liquidityPool_: LiquidityPoolContract_filter
  gameId: BigInt
  gameId_not: BigInt
  gameId_gt: BigInt
  gameId_lt: BigInt
  gameId_gte: BigInt
  gameId_lte: BigInt
  gameId_in: [BigInt!]
  gameId_not_in: [BigInt!]
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  league: String
  league_not: String
  league_gt: String
  league_lt: String
  league_gte: String
  league_lte: String
  league_in: [String!]
  league_not_in: [String!]
  league_contains: String
  league_contains_nocase: String
  league_not_contains: String
  league_not_contains_nocase: String
  league_starts_with: String
  league_starts_with_nocase: String
  league_not_starts_with: String
  league_not_starts_with_nocase: String
  league_ends_with: String
  league_ends_with_nocase: String
  league_not_ends_with: String
  league_not_ends_with_nocase: String
  league_: League_filter
  sport: String
  sport_not: String
  sport_gt: String
  sport_lt: String
  sport_gte: String
  sport_lte: String
  sport_in: [String!]
  sport_not_in: [String!]
  sport_contains: String
  sport_contains_nocase: String
  sport_not_contains: String
  sport_not_contains_nocase: String
  sport_starts_with: String
  sport_starts_with_nocase: String
  sport_not_starts_with: String
  sport_not_starts_with_nocase: String
  sport_ends_with: String
  sport_ends_with_nocase: String
  sport_not_ends_with: String
  sport_not_ends_with_nocase: String
  sport_: Sport_filter
  status: GameStatus
  status_not: GameStatus
  status_in: [GameStatus!]
  status_not_in: [GameStatus!]
  participants_: Participant_filter
  conditions_: Condition_filter
  hasActiveConditions: Boolean
  hasActiveConditions_not: Boolean
  hasActiveConditions_in: [Boolean!]
  hasActiveConditions_not_in: [Boolean!]
  _activeConditionsEntityIds: [String!]
  _activeConditionsEntityIds_not: [String!]
  _activeConditionsEntityIds_contains: [String!]
  _activeConditionsEntityIds_contains_nocase: [String!]
  _activeConditionsEntityIds_not_contains: [String!]
  _activeConditionsEntityIds_not_contains_nocase: [String!]
  _resolvedConditionsEntityIds: [String!]
  _resolvedConditionsEntityIds_not: [String!]
  _resolvedConditionsEntityIds_contains: [String!]
  _resolvedConditionsEntityIds_contains_nocase: [String!]
  _resolvedConditionsEntityIds_not_contains: [String!]
  _resolvedConditionsEntityIds_not_contains_nocase: [String!]
  _canceledConditionsEntityIds: [String!]
  _canceledConditionsEntityIds_not: [String!]
  _canceledConditionsEntityIds_contains: [String!]
  _canceledConditionsEntityIds_contains_nocase: [String!]
  _canceledConditionsEntityIds_not_contains: [String!]
  _canceledConditionsEntityIds_not_contains_nocase: [String!]
  _pausedConditionsEntityIds: [String!]
  _pausedConditionsEntityIds_not: [String!]
  _pausedConditionsEntityIds_contains: [String!]
  _pausedConditionsEntityIds_contains_nocase: [String!]
  _pausedConditionsEntityIds_not_contains: [String!]
  _pausedConditionsEntityIds_not_contains_nocase: [String!]
  startsAt: BigInt
  startsAt_not: BigInt
  startsAt_gt: BigInt
  startsAt_lt: BigInt
  startsAt_gte: BigInt
  startsAt_lte: BigInt
  startsAt_in: [BigInt!]
  startsAt_not_in: [BigInt!]
  provider: BigInt
  provider_not: BigInt
  provider_gt: BigInt
  provider_lt: BigInt
  provider_gte: BigInt
  provider_lte: BigInt
  provider_in: [BigInt!]
  provider_not_in: [BigInt!]
  turnover: BigInt
  turnover_not: BigInt
  turnover_gt: BigInt
  turnover_lt: BigInt
  turnover_gte: BigInt
  turnover_lte: BigInt
  turnover_in: [BigInt!]
  turnover_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  createdBlockTimestamp: BigInt
  createdBlockTimestamp_not: BigInt
  createdBlockTimestamp_gt: BigInt
  createdBlockTimestamp_lt: BigInt
  createdBlockTimestamp_gte: BigInt
  createdBlockTimestamp_lte: BigInt
  createdBlockTimestamp_in: [BigInt!]
  createdBlockTimestamp_not_in: [BigInt!]
  createdTxHash: String
  createdTxHash_not: String
  createdTxHash_gt: String
  createdTxHash_lt: String
  createdTxHash_gte: String
  createdTxHash_lte: String
  createdTxHash_in: [String!]
  createdTxHash_not_in: [String!]
  createdTxHash_contains: String
  createdTxHash_contains_nocase: String
  createdTxHash_not_contains: String
  createdTxHash_not_contains_nocase: String
  createdTxHash_starts_with: String
  createdTxHash_starts_with_nocase: String
  createdTxHash_not_starts_with: String
  createdTxHash_not_starts_with_nocase: String
  createdTxHash_ends_with: String
  createdTxHash_ends_with_nocase: String
  createdTxHash_not_ends_with: String
  createdTxHash_not_ends_with_nocase: String
  shiftedBlockNumber: BigInt
  shiftedBlockNumber_not: BigInt
  shiftedBlockNumber_gt: BigInt
  shiftedBlockNumber_lt: BigInt
  shiftedBlockNumber_gte: BigInt
  shiftedBlockNumber_lte: BigInt
  shiftedBlockNumber_in: [BigInt!]
  shiftedBlockNumber_not_in: [BigInt!]
  shiftedBlockTimestamp: BigInt
  shiftedBlockTimestamp_not: BigInt
  shiftedBlockTimestamp_gt: BigInt
  shiftedBlockTimestamp_lt: BigInt
  shiftedBlockTimestamp_gte: BigInt
  shiftedBlockTimestamp_lte: BigInt
  shiftedBlockTimestamp_in: [BigInt!]
  shiftedBlockTimestamp_not_in: [BigInt!]
  shiftedTxHash: String
  shiftedTxHash_not: String
  shiftedTxHash_gt: String
  shiftedTxHash_lt: String
  shiftedTxHash_gte: String
  shiftedTxHash_lte: String
  shiftedTxHash_in: [String!]
  shiftedTxHash_not_in: [String!]
  shiftedTxHash_contains: String
  shiftedTxHash_contains_nocase: String
  shiftedTxHash_not_contains: String
  shiftedTxHash_not_contains_nocase: String
  shiftedTxHash_starts_with: String
  shiftedTxHash_starts_with_nocase: String
  shiftedTxHash_not_starts_with: String
  shiftedTxHash_not_starts_with_nocase: String
  shiftedTxHash_ends_with: String
  shiftedTxHash_ends_with_nocase: String
  shiftedTxHash_not_ends_with: String
  shiftedTxHash_not_ends_with_nocase: String
  resolvedBlockNumber: BigInt
  resolvedBlockNumber_not: BigInt
  resolvedBlockNumber_gt: BigInt
  resolvedBlockNumber_lt: BigInt
  resolvedBlockNumber_gte: BigInt
  resolvedBlockNumber_lte: BigInt
  resolvedBlockNumber_in: [BigInt!]
  resolvedBlockNumber_not_in: [BigInt!]
  resolvedBlockTimestamp: BigInt
  resolvedBlockTimestamp_not: BigInt
  resolvedBlockTimestamp_gt: BigInt
  resolvedBlockTimestamp_lt: BigInt
  resolvedBlockTimestamp_gte: BigInt
  resolvedBlockTimestamp_lte: BigInt
  resolvedBlockTimestamp_in: [BigInt!]
  resolvedBlockTimestamp_not_in: [BigInt!]
  resolvedTxHash: String
  resolvedTxHash_not: String
  resolvedTxHash_gt: String
  resolvedTxHash_lt: String
  resolvedTxHash_gte: String
  resolvedTxHash_lte: String
  resolvedTxHash_in: [String!]
  resolvedTxHash_not_in: [String!]
  resolvedTxHash_contains: String
  resolvedTxHash_contains_nocase: String
  resolvedTxHash_not_contains: String
  resolvedTxHash_not_contains_nocase: String
  resolvedTxHash_starts_with: String
  resolvedTxHash_starts_with_nocase: String
  resolvedTxHash_not_starts_with: String
  resolvedTxHash_not_starts_with_nocase: String
  resolvedTxHash_ends_with: String
  resolvedTxHash_ends_with_nocase: String
  resolvedTxHash_not_ends_with: String
  resolvedTxHash_not_ends_with_nocase: String
  _updatedAt: BigInt
  _updatedAt_not: BigInt
  _updatedAt_gt: BigInt
  _updatedAt_lt: BigInt
  _updatedAt_gte: BigInt
  _updatedAt_lte: BigInt
  _updatedAt_in: [BigInt!]
  _updatedAt_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Game_filter]
  or: [Game_filter]
}

enum Game_orderBy {
  id
  liquidityPool
  gameId
  title
  slug
  league
  sport
  status
  participants
  conditions
  hasActiveConditions
  _activeConditionsEntityIds
  _resolvedConditionsEntityIds
  _canceledConditionsEntityIds
  _pausedConditionsEntityIds
  startsAt
  provider
  turnover
  createdBlockNumber
  createdBlockTimestamp
  createdTxHash
  shiftedBlockNumber
  shiftedBlockTimestamp
  shiftedTxHash
  resolvedBlockNumber
  resolvedBlockTimestamp
  resolvedTxHash
  _updatedAt
}

"8 bytes signed integer\n"
scalar Int8

type League {
  id: ID!
  name: String!
  slug: String!
  country: Country!
  games(skip: Int = 0, first: Int = 100, orderBy: Game_orderBy, orderDirection: OrderDirection, where: Game_filter): [Game!]!
  hasActiveGames: Boolean!
  activeGamesEntityIds: [String!]
  turnover: BigInt!
}

input League_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  country: String
  country_not: String
  country_gt: String
  country_lt: String
  country_gte: String
  country_lte: String
  country_in: [String!]
  country_not_in: [String!]
  country_contains: String
  country_contains_nocase: String
  country_not_contains: String
  country_not_contains_nocase: String
  country_starts_with: String
  country_starts_with_nocase: String
  country_not_starts_with: String
  country_not_starts_with_nocase: String
  country_ends_with: String
  country_ends_with_nocase: String
  country_not_ends_with: String
  country_not_ends_with_nocase: String
  country_: Country_filter
  games_: Game_filter
  hasActiveGames: Boolean
  hasActiveGames_not: Boolean
  hasActiveGames_in: [Boolean!]
  hasActiveGames_not_in: [Boolean!]
  activeGamesEntityIds: [String!]
  activeGamesEntityIds_not: [String!]
  activeGamesEntityIds_contains: [String!]
  activeGamesEntityIds_contains_nocase: [String!]
  activeGamesEntityIds_not_contains: [String!]
  activeGamesEntityIds_not_contains_nocase: [String!]
  turnover: BigInt
  turnover_not: BigInt
  turnover_gt: BigInt
  turnover_lt: BigInt
  turnover_gte: BigInt
  turnover_lte: BigInt
  turnover_in: [BigInt!]
  turnover_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [League_filter]
  or: [League_filter]
}

enum League_orderBy {
  id
  name
  slug
  country
  games
  hasActiveGames
  activeGamesEntityIds
  turnover
}

type LiquidityPoolContract {
  id: ID!
  chainId: Int!
  chainName: String!
  address: String!
  cores(skip: Int = 0, first: Int = 100, orderBy: CoreContract_orderBy, orderDirection: OrderDirection, where: CoreContract_filter): [CoreContract!]!
  coreAddresses: [String!]
  type: LiquidityPoolContractType!
  token: String!
  tokenDecimals: Int!
  asset: String!
  betsAmount: BigInt!
  betsCount: BigInt!
  wonBetsAmount: BigInt!
  wonBetsCount: BigInt!
  firstCalculatedBlockNumber: BigInt!
  firstCalculatedBlockTimestamp: BigInt!
  lastCalculatedBlockNumber: BigInt!
  lastCalculatedBlockTimestamp: BigInt!
  daysSinceDeployment: BigInt!
  depositedAmount: BigInt!
  withdrawnAmount: BigInt!
  withdrawTimeout: BigInt!

  """all funds on Liquidity Pool"""
  rawTvl: BigInt!
  tvl: BigDecimal!

  """
  (betsAmount - wonBetsAmount) * Xprofit / (depositedAmount - withdrawnAmount) / daysSinceDeployment * 365
  """
  rawApr: BigInt!
  apr: BigDecimal!
  nfts(skip: Int = 0, first: Int = 100, orderBy: LiquidityPoolNft_orderBy, orderDirection: OrderDirection, where: LiquidityPoolNft_filter): [LiquidityPoolNft!]!
  liquidityManager: String
  depositedWithStakingAmount: BigInt!
  withdrawnWithStakingAmount: BigInt!
}

enum LiquidityPoolContractType {
  V1
  V2
}

input LiquidityPoolContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: Int
  chainId_not: Int
  chainId_gt: Int
  chainId_lt: Int
  chainId_gte: Int
  chainId_lte: Int
  chainId_in: [Int!]
  chainId_not_in: [Int!]
  chainName: String
  chainName_not: String
  chainName_gt: String
  chainName_lt: String
  chainName_gte: String
  chainName_lte: String
  chainName_in: [String!]
  chainName_not_in: [String!]
  chainName_contains: String
  chainName_contains_nocase: String
  chainName_not_contains: String
  chainName_not_contains_nocase: String
  chainName_starts_with: String
  chainName_starts_with_nocase: String
  chainName_not_starts_with: String
  chainName_not_starts_with_nocase: String
  chainName_ends_with: String
  chainName_ends_with_nocase: String
  chainName_not_ends_with: String
  chainName_not_ends_with_nocase: String
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  cores_: CoreContract_filter
  coreAddresses: [String!]
  coreAddresses_not: [String!]
  coreAddresses_contains: [String!]
  coreAddresses_contains_nocase: [String!]
  coreAddresses_not_contains: [String!]
  coreAddresses_not_contains_nocase: [String!]
  type: LiquidityPoolContractType
  type_not: LiquidityPoolContractType
  type_in: [LiquidityPoolContractType!]
  type_not_in: [LiquidityPoolContractType!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  tokenDecimals: Int
  tokenDecimals_not: Int
  tokenDecimals_gt: Int
  tokenDecimals_lt: Int
  tokenDecimals_gte: Int
  tokenDecimals_lte: Int
  tokenDecimals_in: [Int!]
  tokenDecimals_not_in: [Int!]
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  betsAmount: BigInt
  betsAmount_not: BigInt
  betsAmount_gt: BigInt
  betsAmount_lt: BigInt
  betsAmount_gte: BigInt
  betsAmount_lte: BigInt
  betsAmount_in: [BigInt!]
  betsAmount_not_in: [BigInt!]
  betsCount: BigInt
  betsCount_not: BigInt
  betsCount_gt: BigInt
  betsCount_lt: BigInt
  betsCount_gte: BigInt
  betsCount_lte: BigInt
  betsCount_in: [BigInt!]
  betsCount_not_in: [BigInt!]
  wonBetsAmount: BigInt
  wonBetsAmount_not: BigInt
  wonBetsAmount_gt: BigInt
  wonBetsAmount_lt: BigInt
  wonBetsAmount_gte: BigInt
  wonBetsAmount_lte: BigInt
  wonBetsAmount_in: [BigInt!]
  wonBetsAmount_not_in: [BigInt!]
  wonBetsCount: BigInt
  wonBetsCount_not: BigInt
  wonBetsCount_gt: BigInt
  wonBetsCount_lt: BigInt
  wonBetsCount_gte: BigInt
  wonBetsCount_lte: BigInt
  wonBetsCount_in: [BigInt!]
  wonBetsCount_not_in: [BigInt!]
  firstCalculatedBlockNumber: BigInt
  firstCalculatedBlockNumber_not: BigInt
  firstCalculatedBlockNumber_gt: BigInt
  firstCalculatedBlockNumber_lt: BigInt
  firstCalculatedBlockNumber_gte: BigInt
  firstCalculatedBlockNumber_lte: BigInt
  firstCalculatedBlockNumber_in: [BigInt!]
  firstCalculatedBlockNumber_not_in: [BigInt!]
  firstCalculatedBlockTimestamp: BigInt
  firstCalculatedBlockTimestamp_not: BigInt
  firstCalculatedBlockTimestamp_gt: BigInt
  firstCalculatedBlockTimestamp_lt: BigInt
  firstCalculatedBlockTimestamp_gte: BigInt
  firstCalculatedBlockTimestamp_lte: BigInt
  firstCalculatedBlockTimestamp_in: [BigInt!]
  firstCalculatedBlockTimestamp_not_in: [BigInt!]
  lastCalculatedBlockNumber: BigInt
  lastCalculatedBlockNumber_not: BigInt
  lastCalculatedBlockNumber_gt: BigInt
  lastCalculatedBlockNumber_lt: BigInt
  lastCalculatedBlockNumber_gte: BigInt
  lastCalculatedBlockNumber_lte: BigInt
  lastCalculatedBlockNumber_in: [BigInt!]
  lastCalculatedBlockNumber_not_in: [BigInt!]
  lastCalculatedBlockTimestamp: BigInt
  lastCalculatedBlockTimestamp_not: BigInt
  lastCalculatedBlockTimestamp_gt: BigInt
  lastCalculatedBlockTimestamp_lt: BigInt
  lastCalculatedBlockTimestamp_gte: BigInt
  lastCalculatedBlockTimestamp_lte: BigInt
  lastCalculatedBlockTimestamp_in: [BigInt!]
  lastCalculatedBlockTimestamp_not_in: [BigInt!]
  daysSinceDeployment: BigInt
  daysSinceDeployment_not: BigInt
  daysSinceDeployment_gt: BigInt
  daysSinceDeployment_lt: BigInt
  daysSinceDeployment_gte: BigInt
  daysSinceDeployment_lte: BigInt
  daysSinceDeployment_in: [BigInt!]
  daysSinceDeployment_not_in: [BigInt!]
  depositedAmount: BigInt
  depositedAmount_not: BigInt
  depositedAmount_gt: BigInt
  depositedAmount_lt: BigInt
  depositedAmount_gte: BigInt
  depositedAmount_lte: BigInt
  depositedAmount_in: [BigInt!]
  depositedAmount_not_in: [BigInt!]
  withdrawnAmount: BigInt
  withdrawnAmount_not: BigInt
  withdrawnAmount_gt: BigInt
  withdrawnAmount_lt: BigInt
  withdrawnAmount_gte: BigInt
  withdrawnAmount_lte: BigInt
  withdrawnAmount_in: [BigInt!]
  withdrawnAmount_not_in: [BigInt!]
  withdrawTimeout: BigInt
  withdrawTimeout_not: BigInt
  withdrawTimeout_gt: BigInt
  withdrawTimeout_lt: BigInt
  withdrawTimeout_gte: BigInt
  withdrawTimeout_lte: BigInt
  withdrawTimeout_in: [BigInt!]
  withdrawTimeout_not_in: [BigInt!]
  rawTvl: BigInt
  rawTvl_not: BigInt
  rawTvl_gt: BigInt
  rawTvl_lt: BigInt
  rawTvl_gte: BigInt
  rawTvl_lte: BigInt
  rawTvl_in: [BigInt!]
  rawTvl_not_in: [BigInt!]
  tvl: BigDecimal
  tvl_not: BigDecimal
  tvl_gt: BigDecimal
  tvl_lt: BigDecimal
  tvl_gte: BigDecimal
  tvl_lte: BigDecimal
  tvl_in: [BigDecimal!]
  tvl_not_in: [BigDecimal!]
  rawApr: BigInt
  rawApr_not: BigInt
  rawApr_gt: BigInt
  rawApr_lt: BigInt
  rawApr_gte: BigInt
  rawApr_lte: BigInt
  rawApr_in: [BigInt!]
  rawApr_not_in: [BigInt!]
  apr: BigDecimal
  apr_not: BigDecimal
  apr_gt: BigDecimal
  apr_lt: BigDecimal
  apr_gte: BigDecimal
  apr_lte: BigDecimal
  apr_in: [BigDecimal!]
  apr_not_in: [BigDecimal!]
  nfts_: LiquidityPoolNft_filter
  liquidityManager: String
  liquidityManager_not: String
  liquidityManager_gt: String
  liquidityManager_lt: String
  liquidityManager_gte: String
  liquidityManager_lte: String
  liquidityManager_in: [String!]
  liquidityManager_not_in: [String!]
  liquidityManager_contains: String
  liquidityManager_contains_nocase: String
  liquidityManager_not_contains: String
  liquidityManager_not_contains_nocase: String
  liquidityManager_starts_with: String
  liquidityManager_starts_with_nocase: String
  liquidityManager_not_starts_with: String
  liquidityManager_not_starts_with_nocase: String
  liquidityManager_ends_with: String
  liquidityManager_ends_with_nocase: String
  liquidityManager_not_ends_with: String
  liquidityManager_not_ends_with_nocase: String
  depositedWithStakingAmount: BigInt
  depositedWithStakingAmount_not: BigInt
  depositedWithStakingAmount_gt: BigInt
  depositedWithStakingAmount_lt: BigInt
  depositedWithStakingAmount_gte: BigInt
  depositedWithStakingAmount_lte: BigInt
  depositedWithStakingAmount_in: [BigInt!]
  depositedWithStakingAmount_not_in: [BigInt!]
  withdrawnWithStakingAmount: BigInt
  withdrawnWithStakingAmount_not: BigInt
  withdrawnWithStakingAmount_gt: BigInt
  withdrawnWithStakingAmount_lt: BigInt
  withdrawnWithStakingAmount_gte: BigInt
  withdrawnWithStakingAmount_lte: BigInt
  withdrawnWithStakingAmount_in: [BigInt!]
  withdrawnWithStakingAmount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityPoolContract_filter]
  or: [LiquidityPoolContract_filter]
}

enum LiquidityPoolContract_orderBy {
  id
  chainId
  chainName
  address
  cores
  coreAddresses
  type
  token
  tokenDecimals
  asset
  betsAmount
  betsCount
  wonBetsAmount
  wonBetsCount
  firstCalculatedBlockNumber
  firstCalculatedBlockTimestamp
  lastCalculatedBlockNumber
  lastCalculatedBlockTimestamp
  daysSinceDeployment
  depositedAmount
  withdrawnAmount
  withdrawTimeout
  rawTvl
  tvl
  rawApr
  apr
  nfts
  liquidityManager
  depositedWithStakingAmount
  withdrawnWithStakingAmount
}

type LiquidityPoolNft {
  id: ID!
  nftId: BigInt!
  owner: String!
  historicalOwners: [String!]!
  liquidityPool: LiquidityPoolContract!
  rawDepositedAmount: BigInt!
  depositedAmount: BigDecimal!
  rawWithdrawnAmount: BigInt!
  withdrawnAmount: BigDecimal!
  isFullyWithdrawn: Boolean!
  transactions(skip: Int = 0, first: Int = 100, orderBy: LiquidityPoolTransaction_orderBy, orderDirection: OrderDirection, where: LiquidityPoolTransaction_filter): [LiquidityPoolTransaction!]!
  createBlockNumber: BigInt!
  createBlockTimestamp: BigInt!
  withdrawTimeout: BigInt!
}

input LiquidityPoolNft_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nftId: BigInt
  nftId_not: BigInt
  nftId_gt: BigInt
  nftId_lt: BigInt
  nftId_gte: BigInt
  nftId_lte: BigInt
  nftId_in: [BigInt!]
  nftId_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  historicalOwners: [String!]
  historicalOwners_not: [String!]
  historicalOwners_contains: [String!]
  historicalOwners_contains_nocase: [String!]
  historicalOwners_not_contains: [String!]
  historicalOwners_not_contains_nocase: [String!]
  liquidityPool: String
  liquidityPool_not: String
  liquidityPool_gt: String
  liquidityPool_lt: String
  liquidityPool_gte: String
  liquidityPool_lte: String
  liquidityPool_in: [String!]
  liquidityPool_not_in: [String!]
  liquidityPool_contains: String
  liquidityPool_contains_nocase: String
  liquidityPool_not_contains: String
  liquidityPool_not_contains_nocase: String
  liquidityPool_starts_with: String
  liquidityPool_starts_with_nocase: String
  liquidityPool_not_starts_with: String
  liquidityPool_not_starts_with_nocase: String
  liquidityPool_ends_with: String
  liquidityPool_ends_with_nocase: String
  liquidityPool_not_ends_with: String
  liquidityPool_not_ends_with_nocase: String
  liquidityPool_: LiquidityPoolContract_filter
  rawDepositedAmount: BigInt
  rawDepositedAmount_not: BigInt
  rawDepositedAmount_gt: BigInt
  rawDepositedAmount_lt: BigInt
  rawDepositedAmount_gte: BigInt
  rawDepositedAmount_lte: BigInt
  rawDepositedAmount_in: [BigInt!]
  rawDepositedAmount_not_in: [BigInt!]
  depositedAmount: BigDecimal
  depositedAmount_not: BigDecimal
  depositedAmount_gt: BigDecimal
  depositedAmount_lt: BigDecimal
  depositedAmount_gte: BigDecimal
  depositedAmount_lte: BigDecimal
  depositedAmount_in: [BigDecimal!]
  depositedAmount_not_in: [BigDecimal!]
  rawWithdrawnAmount: BigInt
  rawWithdrawnAmount_not: BigInt
  rawWithdrawnAmount_gt: BigInt
  rawWithdrawnAmount_lt: BigInt
  rawWithdrawnAmount_gte: BigInt
  rawWithdrawnAmount_lte: BigInt
  rawWithdrawnAmount_in: [BigInt!]
  rawWithdrawnAmount_not_in: [BigInt!]
  withdrawnAmount: BigDecimal
  withdrawnAmount_not: BigDecimal
  withdrawnAmount_gt: BigDecimal
  withdrawnAmount_lt: BigDecimal
  withdrawnAmount_gte: BigDecimal
  withdrawnAmount_lte: BigDecimal
  withdrawnAmount_in: [BigDecimal!]
  withdrawnAmount_not_in: [BigDecimal!]
  isFullyWithdrawn: Boolean
  isFullyWithdrawn_not: Boolean
  isFullyWithdrawn_in: [Boolean!]
  isFullyWithdrawn_not_in: [Boolean!]
  transactions_: LiquidityPoolTransaction_filter
  createBlockNumber: BigInt
  createBlockNumber_not: BigInt
  createBlockNumber_gt: BigInt
  createBlockNumber_lt: BigInt
  createBlockNumber_gte: BigInt
  createBlockNumber_lte: BigInt
  createBlockNumber_in: [BigInt!]
  createBlockNumber_not_in: [BigInt!]
  createBlockTimestamp: BigInt
  createBlockTimestamp_not: BigInt
  createBlockTimestamp_gt: BigInt
  createBlockTimestamp_lt: BigInt
  createBlockTimestamp_gte: BigInt
  createBlockTimestamp_lte: BigInt
  createBlockTimestamp_in: [BigInt!]
  createBlockTimestamp_not_in: [BigInt!]
  withdrawTimeout: BigInt
  withdrawTimeout_not: BigInt
  withdrawTimeout_gt: BigInt
  withdrawTimeout_lt: BigInt
  withdrawTimeout_gte: BigInt
  withdrawTimeout_lte: BigInt
  withdrawTimeout_in: [BigInt!]
  withdrawTimeout_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityPoolNft_filter]
  or: [LiquidityPoolNft_filter]
}

enum LiquidityPoolNft_orderBy {
  id
  nftId
  owner
  historicalOwners
  liquidityPool
  rawDepositedAmount
  depositedAmount
  rawWithdrawnAmount
  withdrawnAmount
  isFullyWithdrawn
  transactions
  createBlockNumber
  createBlockTimestamp
  withdrawTimeout
}

type LiquidityPoolTransaction {
  id: ID!
  account: String!
  nft: LiquidityPoolNft!
  type: LiquidityPoolTransactionType!
  liquidityPool: LiquidityPoolContract!
  rawAmount: BigInt!
  amount: BigDecimal!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: String!
}

enum LiquidityPoolTransactionType {
  Deposit
  Withdrawal
}

input LiquidityPoolTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: LiquidityPoolNft_filter
  type: LiquidityPoolTransactionType
  type_not: LiquidityPoolTransactionType
  type_in: [LiquidityPoolTransactionType!]
  type_not_in: [LiquidityPoolTransactionType!]
  liquidityPool: String
  liquidityPool_not: String
  liquidityPool_gt: String
  liquidityPool_lt: String
  liquidityPool_gte: String
  liquidityPool_lte: String
  liquidityPool_in: [String!]
  liquidityPool_not_in: [String!]
  liquidityPool_contains: String
  liquidityPool_contains_nocase: String
  liquidityPool_not_contains: String
  liquidityPool_not_contains_nocase: String
  liquidityPool_starts_with: String
  liquidityPool_starts_with_nocase: String
  liquidityPool_not_starts_with: String
  liquidityPool_not_starts_with_nocase: String
  liquidityPool_ends_with: String
  liquidityPool_ends_with_nocase: String
  liquidityPool_not_ends_with: String
  liquidityPool_not_ends_with_nocase: String
  liquidityPool_: LiquidityPoolContract_filter
  rawAmount: BigInt
  rawAmount_not: BigInt
  rawAmount_gt: BigInt
  rawAmount_lt: BigInt
  rawAmount_gte: BigInt
  rawAmount_lte: BigInt
  rawAmount_in: [BigInt!]
  rawAmount_not_in: [BigInt!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  txHash: String
  txHash_not: String
  txHash_gt: String
  txHash_lt: String
  txHash_gte: String
  txHash_lte: String
  txHash_in: [String!]
  txHash_not_in: [String!]
  txHash_contains: String
  txHash_contains_nocase: String
  txHash_not_contains: String
  txHash_not_contains_nocase: String
  txHash_starts_with: String
  txHash_starts_with_nocase: String
  txHash_not_starts_with: String
  txHash_not_starts_with_nocase: String
  txHash_ends_with: String
  txHash_ends_with_nocase: String
  txHash_not_ends_with: String
  txHash_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityPoolTransaction_filter]
  or: [LiquidityPoolTransaction_filter]
}

enum LiquidityPoolTransaction_orderBy {
  id
  account
  nft
  type
  liquidityPool
  rawAmount
  amount
  blockNumber
  blockTimestamp
  txHash
}

type LiveBet {
  """Core contract address + Bet Id"""
  id: ID!
  core: CoreContract!
  betId: BigInt!
  bettor: String!
  nonce: BigInt
  owner: String!
  actor: String!
  affiliate: String
  _conditions(skip: Int = 0, first: Int = 100, orderBy: LiveCondition_orderBy, orderDirection: OrderDirection, where: LiveCondition_filter): [LiveCondition!]!
  _conditionIds: [BigInt!]!
  rawAmount: BigInt!
  amount: BigDecimal!
  _tokenDecimals: Int!
  rawPotentialPayout: BigInt!
  potentialPayout: BigDecimal!
  rawPayout: BigInt
  payout: BigDecimal
  rawPayoutLimit: BigInt!
  payoutLimit: BigDecimal!
  rawOdds: BigInt!
  odds: BigDecimal!
  _oddsDecimals: Int!
  rawSettledOdds: BigInt
  settledOdds: BigDecimal
  rawSettledMargin: BigInt
  settledMargin: BigDecimal
  _marginsForSettle: String

  """when the last game from all sub bets starts at + 2h"""
  selections(skip: Int = 0, first: Int = 100, orderBy: LiveSelection_orderBy, orderDirection: OrderDirection, where: LiveSelection_filter): [LiveSelection!]!
  _gamesIds: [String!]!
  createdBlockNumber: BigInt!
  createdBlockTimestamp: BigInt!
  createdTxHash: String!
  resolvedBlockNumber: BigInt
  resolvedBlockTimestamp: BigInt
  resolvedTxHash: String
  status: BetStatus!
  result: BetResult
  isRedeemable: Boolean!
  isRedeemed: Boolean!
  redeemedBlockNumber: BigInt
  redeemedBlockTimestamp: BigInt
  redeemedTxHash: String
  _subBetsCount: Int!
  _wonSubBetsCount: Int!
  _lostSubBetsCount: Int!
  _canceledSubBetsCount: Int!
  _isFreebet: Boolean!
  freebet: Freebet
  _updatedAt: BigInt!
}

input LiveBet_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  core: String
  core_not: String
  core_gt: String
  core_lt: String
  core_gte: String
  core_lte: String
  core_in: [String!]
  core_not_in: [String!]
  core_contains: String
  core_contains_nocase: String
  core_not_contains: String
  core_not_contains_nocase: String
  core_starts_with: String
  core_starts_with_nocase: String
  core_not_starts_with: String
  core_not_starts_with_nocase: String
  core_ends_with: String
  core_ends_with_nocase: String
  core_not_ends_with: String
  core_not_ends_with_nocase: String
  core_: CoreContract_filter
  betId: BigInt
  betId_not: BigInt
  betId_gt: BigInt
  betId_lt: BigInt
  betId_gte: BigInt
  betId_lte: BigInt
  betId_in: [BigInt!]
  betId_not_in: [BigInt!]
  bettor: String
  bettor_not: String
  bettor_gt: String
  bettor_lt: String
  bettor_gte: String
  bettor_lte: String
  bettor_in: [String!]
  bettor_not_in: [String!]
  bettor_contains: String
  bettor_contains_nocase: String
  bettor_not_contains: String
  bettor_not_contains_nocase: String
  bettor_starts_with: String
  bettor_starts_with_nocase: String
  bettor_not_starts_with: String
  bettor_not_starts_with_nocase: String
  bettor_ends_with: String
  bettor_ends_with_nocase: String
  bettor_not_ends_with: String
  bettor_not_ends_with_nocase: String
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  actor: String
  actor_not: String
  actor_gt: String
  actor_lt: String
  actor_gte: String
  actor_lte: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_contains: String
  actor_contains_nocase: String
  actor_not_contains: String
  actor_not_contains_nocase: String
  actor_starts_with: String
  actor_starts_with_nocase: String
  actor_not_starts_with: String
  actor_not_starts_with_nocase: String
  actor_ends_with: String
  actor_ends_with_nocase: String
  actor_not_ends_with: String
  actor_not_ends_with_nocase: String
  affiliate: String
  affiliate_not: String
  affiliate_gt: String
  affiliate_lt: String
  affiliate_gte: String
  affiliate_lte: String
  affiliate_in: [String!]
  affiliate_not_in: [String!]
  affiliate_contains: String
  affiliate_contains_nocase: String
  affiliate_not_contains: String
  affiliate_not_contains_nocase: String
  affiliate_starts_with: String
  affiliate_starts_with_nocase: String
  affiliate_not_starts_with: String
  affiliate_not_starts_with_nocase: String
  affiliate_ends_with: String
  affiliate_ends_with_nocase: String
  affiliate_not_ends_with: String
  affiliate_not_ends_with_nocase: String
  _conditions: [String!]
  _conditions_not: [String!]
  _conditions_contains: [String!]
  _conditions_contains_nocase: [String!]
  _conditions_not_contains: [String!]
  _conditions_not_contains_nocase: [String!]
  _conditions_: LiveCondition_filter
  _conditionIds: [BigInt!]
  _conditionIds_not: [BigInt!]
  _conditionIds_contains: [BigInt!]
  _conditionIds_contains_nocase: [BigInt!]
  _conditionIds_not_contains: [BigInt!]
  _conditionIds_not_contains_nocase: [BigInt!]
  rawAmount: BigInt
  rawAmount_not: BigInt
  rawAmount_gt: BigInt
  rawAmount_lt: BigInt
  rawAmount_gte: BigInt
  rawAmount_lte: BigInt
  rawAmount_in: [BigInt!]
  rawAmount_not_in: [BigInt!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  _tokenDecimals: Int
  _tokenDecimals_not: Int
  _tokenDecimals_gt: Int
  _tokenDecimals_lt: Int
  _tokenDecimals_gte: Int
  _tokenDecimals_lte: Int
  _tokenDecimals_in: [Int!]
  _tokenDecimals_not_in: [Int!]
  rawPotentialPayout: BigInt
  rawPotentialPayout_not: BigInt
  rawPotentialPayout_gt: BigInt
  rawPotentialPayout_lt: BigInt
  rawPotentialPayout_gte: BigInt
  rawPotentialPayout_lte: BigInt
  rawPotentialPayout_in: [BigInt!]
  rawPotentialPayout_not_in: [BigInt!]
  potentialPayout: BigDecimal
  potentialPayout_not: BigDecimal
  potentialPayout_gt: BigDecimal
  potentialPayout_lt: BigDecimal
  potentialPayout_gte: BigDecimal
  potentialPayout_lte: BigDecimal
  potentialPayout_in: [BigDecimal!]
  potentialPayout_not_in: [BigDecimal!]
  rawPayout: BigInt
  rawPayout_not: BigInt
  rawPayout_gt: BigInt
  rawPayout_lt: BigInt
  rawPayout_gte: BigInt
  rawPayout_lte: BigInt
  rawPayout_in: [BigInt!]
  rawPayout_not_in: [BigInt!]
  payout: BigDecimal
  payout_not: BigDecimal
  payout_gt: BigDecimal
  payout_lt: BigDecimal
  payout_gte: BigDecimal
  payout_lte: BigDecimal
  payout_in: [BigDecimal!]
  payout_not_in: [BigDecimal!]
  rawPayoutLimit: BigInt
  rawPayoutLimit_not: BigInt
  rawPayoutLimit_gt: BigInt
  rawPayoutLimit_lt: BigInt
  rawPayoutLimit_gte: BigInt
  rawPayoutLimit_lte: BigInt
  rawPayoutLimit_in: [BigInt!]
  rawPayoutLimit_not_in: [BigInt!]
  payoutLimit: BigDecimal
  payoutLimit_not: BigDecimal
  payoutLimit_gt: BigDecimal
  payoutLimit_lt: BigDecimal
  payoutLimit_gte: BigDecimal
  payoutLimit_lte: BigDecimal
  payoutLimit_in: [BigDecimal!]
  payoutLimit_not_in: [BigDecimal!]
  rawOdds: BigInt
  rawOdds_not: BigInt
  rawOdds_gt: BigInt
  rawOdds_lt: BigInt
  rawOdds_gte: BigInt
  rawOdds_lte: BigInt
  rawOdds_in: [BigInt!]
  rawOdds_not_in: [BigInt!]
  odds: BigDecimal
  odds_not: BigDecimal
  odds_gt: BigDecimal
  odds_lt: BigDecimal
  odds_gte: BigDecimal
  odds_lte: BigDecimal
  odds_in: [BigDecimal!]
  odds_not_in: [BigDecimal!]
  _oddsDecimals: Int
  _oddsDecimals_not: Int
  _oddsDecimals_gt: Int
  _oddsDecimals_lt: Int
  _oddsDecimals_gte: Int
  _oddsDecimals_lte: Int
  _oddsDecimals_in: [Int!]
  _oddsDecimals_not_in: [Int!]
  rawSettledOdds: BigInt
  rawSettledOdds_not: BigInt
  rawSettledOdds_gt: BigInt
  rawSettledOdds_lt: BigInt
  rawSettledOdds_gte: BigInt
  rawSettledOdds_lte: BigInt
  rawSettledOdds_in: [BigInt!]
  rawSettledOdds_not_in: [BigInt!]
  settledOdds: BigDecimal
  settledOdds_not: BigDecimal
  settledOdds_gt: BigDecimal
  settledOdds_lt: BigDecimal
  settledOdds_gte: BigDecimal
  settledOdds_lte: BigDecimal
  settledOdds_in: [BigDecimal!]
  settledOdds_not_in: [BigDecimal!]
  rawSettledMargin: BigInt
  rawSettledMargin_not: BigInt
  rawSettledMargin_gt: BigInt
  rawSettledMargin_lt: BigInt
  rawSettledMargin_gte: BigInt
  rawSettledMargin_lte: BigInt
  rawSettledMargin_in: [BigInt!]
  rawSettledMargin_not_in: [BigInt!]
  settledMargin: BigDecimal
  settledMargin_not: BigDecimal
  settledMargin_gt: BigDecimal
  settledMargin_lt: BigDecimal
  settledMargin_gte: BigDecimal
  settledMargin_lte: BigDecimal
  settledMargin_in: [BigDecimal!]
  settledMargin_not_in: [BigDecimal!]
  _marginsForSettle: String
  _marginsForSettle_not: String
  _marginsForSettle_gt: String
  _marginsForSettle_lt: String
  _marginsForSettle_gte: String
  _marginsForSettle_lte: String
  _marginsForSettle_in: [String!]
  _marginsForSettle_not_in: [String!]
  _marginsForSettle_contains: String
  _marginsForSettle_contains_nocase: String
  _marginsForSettle_not_contains: String
  _marginsForSettle_not_contains_nocase: String
  _marginsForSettle_starts_with: String
  _marginsForSettle_starts_with_nocase: String
  _marginsForSettle_not_starts_with: String
  _marginsForSettle_not_starts_with_nocase: String
  _marginsForSettle_ends_with: String
  _marginsForSettle_ends_with_nocase: String
  _marginsForSettle_not_ends_with: String
  _marginsForSettle_not_ends_with_nocase: String
  selections_: LiveSelection_filter
  _gamesIds: [String!]
  _gamesIds_not: [String!]
  _gamesIds_contains: [String!]
  _gamesIds_contains_nocase: [String!]
  _gamesIds_not_contains: [String!]
  _gamesIds_not_contains_nocase: [String!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  createdBlockTimestamp: BigInt
  createdBlockTimestamp_not: BigInt
  createdBlockTimestamp_gt: BigInt
  createdBlockTimestamp_lt: BigInt
  createdBlockTimestamp_gte: BigInt
  createdBlockTimestamp_lte: BigInt
  createdBlockTimestamp_in: [BigInt!]
  createdBlockTimestamp_not_in: [BigInt!]
  createdTxHash: String
  createdTxHash_not: String
  createdTxHash_gt: String
  createdTxHash_lt: String
  createdTxHash_gte: String
  createdTxHash_lte: String
  createdTxHash_in: [String!]
  createdTxHash_not_in: [String!]
  createdTxHash_contains: String
  createdTxHash_contains_nocase: String
  createdTxHash_not_contains: String
  createdTxHash_not_contains_nocase: String
  createdTxHash_starts_with: String
  createdTxHash_starts_with_nocase: String
  createdTxHash_not_starts_with: String
  createdTxHash_not_starts_with_nocase: String
  createdTxHash_ends_with: String
  createdTxHash_ends_with_nocase: String
  createdTxHash_not_ends_with: String
  createdTxHash_not_ends_with_nocase: String
  resolvedBlockNumber: BigInt
  resolvedBlockNumber_not: BigInt
  resolvedBlockNumber_gt: BigInt
  resolvedBlockNumber_lt: BigInt
  resolvedBlockNumber_gte: BigInt
  resolvedBlockNumber_lte: BigInt
  resolvedBlockNumber_in: [BigInt!]
  resolvedBlockNumber_not_in: [BigInt!]
  resolvedBlockTimestamp: BigInt
  resolvedBlockTimestamp_not: BigInt
  resolvedBlockTimestamp_gt: BigInt
  resolvedBlockTimestamp_lt: BigInt
  resolvedBlockTimestamp_gte: BigInt
  resolvedBlockTimestamp_lte: BigInt
  resolvedBlockTimestamp_in: [BigInt!]
  resolvedBlockTimestamp_not_in: [BigInt!]
  resolvedTxHash: String
  resolvedTxHash_not: String
  resolvedTxHash_gt: String
  resolvedTxHash_lt: String
  resolvedTxHash_gte: String
  resolvedTxHash_lte: String
  resolvedTxHash_in: [String!]
  resolvedTxHash_not_in: [String!]
  resolvedTxHash_contains: String
  resolvedTxHash_contains_nocase: String
  resolvedTxHash_not_contains: String
  resolvedTxHash_not_contains_nocase: String
  resolvedTxHash_starts_with: String
  resolvedTxHash_starts_with_nocase: String
  resolvedTxHash_not_starts_with: String
  resolvedTxHash_not_starts_with_nocase: String
  resolvedTxHash_ends_with: String
  resolvedTxHash_ends_with_nocase: String
  resolvedTxHash_not_ends_with: String
  resolvedTxHash_not_ends_with_nocase: String
  status: BetStatus
  status_not: BetStatus
  status_in: [BetStatus!]
  status_not_in: [BetStatus!]
  result: BetResult
  result_not: BetResult
  result_in: [BetResult!]
  result_not_in: [BetResult!]
  isRedeemable: Boolean
  isRedeemable_not: Boolean
  isRedeemable_in: [Boolean!]
  isRedeemable_not_in: [Boolean!]
  isRedeemed: Boolean
  isRedeemed_not: Boolean
  isRedeemed_in: [Boolean!]
  isRedeemed_not_in: [Boolean!]
  redeemedBlockNumber: BigInt
  redeemedBlockNumber_not: BigInt
  redeemedBlockNumber_gt: BigInt
  redeemedBlockNumber_lt: BigInt
  redeemedBlockNumber_gte: BigInt
  redeemedBlockNumber_lte: BigInt
  redeemedBlockNumber_in: [BigInt!]
  redeemedBlockNumber_not_in: [BigInt!]
  redeemedBlockTimestamp: BigInt
  redeemedBlockTimestamp_not: BigInt
  redeemedBlockTimestamp_gt: BigInt
  redeemedBlockTimestamp_lt: BigInt
  redeemedBlockTimestamp_gte: BigInt
  redeemedBlockTimestamp_lte: BigInt
  redeemedBlockTimestamp_in: [BigInt!]
  redeemedBlockTimestamp_not_in: [BigInt!]
  redeemedTxHash: String
  redeemedTxHash_not: String
  redeemedTxHash_gt: String
  redeemedTxHash_lt: String
  redeemedTxHash_gte: String
  redeemedTxHash_lte: String
  redeemedTxHash_in: [String!]
  redeemedTxHash_not_in: [String!]
  redeemedTxHash_contains: String
  redeemedTxHash_contains_nocase: String
  redeemedTxHash_not_contains: String
  redeemedTxHash_not_contains_nocase: String
  redeemedTxHash_starts_with: String
  redeemedTxHash_starts_with_nocase: String
  redeemedTxHash_not_starts_with: String
  redeemedTxHash_not_starts_with_nocase: String
  redeemedTxHash_ends_with: String
  redeemedTxHash_ends_with_nocase: String
  redeemedTxHash_not_ends_with: String
  redeemedTxHash_not_ends_with_nocase: String
  _subBetsCount: Int
  _subBetsCount_not: Int
  _subBetsCount_gt: Int
  _subBetsCount_lt: Int
  _subBetsCount_gte: Int
  _subBetsCount_lte: Int
  _subBetsCount_in: [Int!]
  _subBetsCount_not_in: [Int!]
  _wonSubBetsCount: Int
  _wonSubBetsCount_not: Int
  _wonSubBetsCount_gt: Int
  _wonSubBetsCount_lt: Int
  _wonSubBetsCount_gte: Int
  _wonSubBetsCount_lte: Int
  _wonSubBetsCount_in: [Int!]
  _wonSubBetsCount_not_in: [Int!]
  _lostSubBetsCount: Int
  _lostSubBetsCount_not: Int
  _lostSubBetsCount_gt: Int
  _lostSubBetsCount_lt: Int
  _lostSubBetsCount_gte: Int
  _lostSubBetsCount_lte: Int
  _lostSubBetsCount_in: [Int!]
  _lostSubBetsCount_not_in: [Int!]
  _canceledSubBetsCount: Int
  _canceledSubBetsCount_not: Int
  _canceledSubBetsCount_gt: Int
  _canceledSubBetsCount_lt: Int
  _canceledSubBetsCount_gte: Int
  _canceledSubBetsCount_lte: Int
  _canceledSubBetsCount_in: [Int!]
  _canceledSubBetsCount_not_in: [Int!]
  _isFreebet: Boolean
  _isFreebet_not: Boolean
  _isFreebet_in: [Boolean!]
  _isFreebet_not_in: [Boolean!]
  freebet: String
  freebet_not: String
  freebet_gt: String
  freebet_lt: String
  freebet_gte: String
  freebet_lte: String
  freebet_in: [String!]
  freebet_not_in: [String!]
  freebet_contains: String
  freebet_contains_nocase: String
  freebet_not_contains: String
  freebet_not_contains_nocase: String
  freebet_starts_with: String
  freebet_starts_with_nocase: String
  freebet_not_starts_with: String
  freebet_not_starts_with_nocase: String
  freebet_ends_with: String
  freebet_ends_with_nocase: String
  freebet_not_ends_with: String
  freebet_not_ends_with_nocase: String
  freebet_: Freebet_filter
  _updatedAt: BigInt
  _updatedAt_not: BigInt
  _updatedAt_gt: BigInt
  _updatedAt_lt: BigInt
  _updatedAt_gte: BigInt
  _updatedAt_lte: BigInt
  _updatedAt_in: [BigInt!]
  _updatedAt_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiveBet_filter]
  or: [LiveBet_filter]
}

enum LiveBet_orderBy {
  id
  core
  betId
  bettor
  nonce
  owner
  actor
  affiliate
  _conditions
  _conditionIds
  rawAmount
  amount
  _tokenDecimals
  rawPotentialPayout
  potentialPayout
  rawPayout
  payout
  rawPayoutLimit
  payoutLimit
  rawOdds
  odds
  _oddsDecimals
  rawSettledOdds
  settledOdds
  rawSettledMargin
  settledMargin
  _marginsForSettle
  selections
  _gamesIds
  createdBlockNumber
  createdBlockTimestamp
  createdTxHash
  resolvedBlockNumber
  resolvedBlockTimestamp
  resolvedTxHash
  status
  result
  isRedeemable
  isRedeemed
  redeemedBlockNumber
  redeemedBlockTimestamp
  redeemedTxHash
  _subBetsCount
  _wonSubBetsCount
  _lostSubBetsCount
  _canceledSubBetsCount
  _isFreebet
  freebet
  _updatedAt
}

type LiveCondition {
  """Core Contract address + Condition Id"""
  id: ID!
  title: String
  core: CoreContract!
  coreAddress: String!
  conditionId: BigInt!
  gameId: BigInt!
  outcomes(skip: Int = 0, first: Int = 100, orderBy: LiveOutcome_orderBy, orderDirection: OrderDirection, where: LiveOutcome_filter): [LiveOutcome!]!
  outcomesIds: [BigInt!]
  wonOutcomes(skip: Int = 0, first: Int = 100, orderBy: LiveOutcome_orderBy, orderDirection: OrderDirection, where: LiveOutcome_filter): [LiveOutcome!]
  wonOutcomeIds: [BigInt!]
  status: ConditionStatus!
  turnover: BigInt!
  createdBlockNumber: BigInt!
  createdBlockTimestamp: BigInt!
  createdTxHash: String!
  resolvedBlockNumber: BigInt
  resolvedBlockTimestamp: BigInt
  resolvedTxHash: String
  _updatedAt: BigInt!
  _winningOutcomesCount: Int!
}

input LiveCondition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  core: String
  core_not: String
  core_gt: String
  core_lt: String
  core_gte: String
  core_lte: String
  core_in: [String!]
  core_not_in: [String!]
  core_contains: String
  core_contains_nocase: String
  core_not_contains: String
  core_not_contains_nocase: String
  core_starts_with: String
  core_starts_with_nocase: String
  core_not_starts_with: String
  core_not_starts_with_nocase: String
  core_ends_with: String
  core_ends_with_nocase: String
  core_not_ends_with: String
  core_not_ends_with_nocase: String
  core_: CoreContract_filter
  coreAddress: String
  coreAddress_not: String
  coreAddress_gt: String
  coreAddress_lt: String
  coreAddress_gte: String
  coreAddress_lte: String
  coreAddress_in: [String!]
  coreAddress_not_in: [String!]
  coreAddress_contains: String
  coreAddress_contains_nocase: String
  coreAddress_not_contains: String
  coreAddress_not_contains_nocase: String
  coreAddress_starts_with: String
  coreAddress_starts_with_nocase: String
  coreAddress_not_starts_with: String
  coreAddress_not_starts_with_nocase: String
  coreAddress_ends_with: String
  coreAddress_ends_with_nocase: String
  coreAddress_not_ends_with: String
  coreAddress_not_ends_with_nocase: String
  conditionId: BigInt
  conditionId_not: BigInt
  conditionId_gt: BigInt
  conditionId_lt: BigInt
  conditionId_gte: BigInt
  conditionId_lte: BigInt
  conditionId_in: [BigInt!]
  conditionId_not_in: [BigInt!]
  gameId: BigInt
  gameId_not: BigInt
  gameId_gt: BigInt
  gameId_lt: BigInt
  gameId_gte: BigInt
  gameId_lte: BigInt
  gameId_in: [BigInt!]
  gameId_not_in: [BigInt!]
  outcomes_: LiveOutcome_filter
  outcomesIds: [BigInt!]
  outcomesIds_not: [BigInt!]
  outcomesIds_contains: [BigInt!]
  outcomesIds_contains_nocase: [BigInt!]
  outcomesIds_not_contains: [BigInt!]
  outcomesIds_not_contains_nocase: [BigInt!]
  wonOutcomes: [String!]
  wonOutcomes_not: [String!]
  wonOutcomes_contains: [String!]
  wonOutcomes_contains_nocase: [String!]
  wonOutcomes_not_contains: [String!]
  wonOutcomes_not_contains_nocase: [String!]
  wonOutcomes_: LiveOutcome_filter
  wonOutcomeIds: [BigInt!]
  wonOutcomeIds_not: [BigInt!]
  wonOutcomeIds_contains: [BigInt!]
  wonOutcomeIds_contains_nocase: [BigInt!]
  wonOutcomeIds_not_contains: [BigInt!]
  wonOutcomeIds_not_contains_nocase: [BigInt!]
  status: ConditionStatus
  status_not: ConditionStatus
  status_in: [ConditionStatus!]
  status_not_in: [ConditionStatus!]
  turnover: BigInt
  turnover_not: BigInt
  turnover_gt: BigInt
  turnover_lt: BigInt
  turnover_gte: BigInt
  turnover_lte: BigInt
  turnover_in: [BigInt!]
  turnover_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  createdBlockTimestamp: BigInt
  createdBlockTimestamp_not: BigInt
  createdBlockTimestamp_gt: BigInt
  createdBlockTimestamp_lt: BigInt
  createdBlockTimestamp_gte: BigInt
  createdBlockTimestamp_lte: BigInt
  createdBlockTimestamp_in: [BigInt!]
  createdBlockTimestamp_not_in: [BigInt!]
  createdTxHash: String
  createdTxHash_not: String
  createdTxHash_gt: String
  createdTxHash_lt: String
  createdTxHash_gte: String
  createdTxHash_lte: String
  createdTxHash_in: [String!]
  createdTxHash_not_in: [String!]
  createdTxHash_contains: String
  createdTxHash_contains_nocase: String
  createdTxHash_not_contains: String
  createdTxHash_not_contains_nocase: String
  createdTxHash_starts_with: String
  createdTxHash_starts_with_nocase: String
  createdTxHash_not_starts_with: String
  createdTxHash_not_starts_with_nocase: String
  createdTxHash_ends_with: String
  createdTxHash_ends_with_nocase: String
  createdTxHash_not_ends_with: String
  createdTxHash_not_ends_with_nocase: String
  resolvedBlockNumber: BigInt
  resolvedBlockNumber_not: BigInt
  resolvedBlockNumber_gt: BigInt
  resolvedBlockNumber_lt: BigInt
  resolvedBlockNumber_gte: BigInt
  resolvedBlockNumber_lte: BigInt
  resolvedBlockNumber_in: [BigInt!]
  resolvedBlockNumber_not_in: [BigInt!]
  resolvedBlockTimestamp: BigInt
  resolvedBlockTimestamp_not: BigInt
  resolvedBlockTimestamp_gt: BigInt
  resolvedBlockTimestamp_lt: BigInt
  resolvedBlockTimestamp_gte: BigInt
  resolvedBlockTimestamp_lte: BigInt
  resolvedBlockTimestamp_in: [BigInt!]
  resolvedBlockTimestamp_not_in: [BigInt!]
  resolvedTxHash: String
  resolvedTxHash_not: String
  resolvedTxHash_gt: String
  resolvedTxHash_lt: String
  resolvedTxHash_gte: String
  resolvedTxHash_lte: String
  resolvedTxHash_in: [String!]
  resolvedTxHash_not_in: [String!]
  resolvedTxHash_contains: String
  resolvedTxHash_contains_nocase: String
  resolvedTxHash_not_contains: String
  resolvedTxHash_not_contains_nocase: String
  resolvedTxHash_starts_with: String
  resolvedTxHash_starts_with_nocase: String
  resolvedTxHash_not_starts_with: String
  resolvedTxHash_not_starts_with_nocase: String
  resolvedTxHash_ends_with: String
  resolvedTxHash_ends_with_nocase: String
  resolvedTxHash_not_ends_with: String
  resolvedTxHash_not_ends_with_nocase: String
  _updatedAt: BigInt
  _updatedAt_not: BigInt
  _updatedAt_gt: BigInt
  _updatedAt_lt: BigInt
  _updatedAt_gte: BigInt
  _updatedAt_lte: BigInt
  _updatedAt_in: [BigInt!]
  _updatedAt_not_in: [BigInt!]
  _winningOutcomesCount: Int
  _winningOutcomesCount_not: Int
  _winningOutcomesCount_gt: Int
  _winningOutcomesCount_lt: Int
  _winningOutcomesCount_gte: Int
  _winningOutcomesCount_lte: Int
  _winningOutcomesCount_in: [Int!]
  _winningOutcomesCount_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiveCondition_filter]
  or: [LiveCondition_filter]
}

enum LiveCondition_orderBy {
  id
  title
  core
  coreAddress
  conditionId
  gameId
  outcomes
  outcomesIds
  wonOutcomes
  wonOutcomeIds
  status
  turnover
  createdBlockNumber
  createdBlockTimestamp
  createdTxHash
  resolvedBlockNumber
  resolvedBlockTimestamp
  resolvedTxHash
  _updatedAt
  _winningOutcomesCount
}

type LiveOutcome {
  """
  Condition entity Id (Core Contract address + Condition Id) + outcome Id
  """
  id: ID!
  title: String
  core: CoreContract!
  outcomeId: BigInt!
  condition: LiveCondition!
  sortOrder: Int!
  _betsEntityIds: [String!]
  result: OutcomeResult
  selections(skip: Int = 0, first: Int = 100, orderBy: LiveSelection_orderBy, orderDirection: OrderDirection, where: LiveSelection_filter): [LiveSelection!]!
  _updatedAt: BigInt!
}

input LiveOutcome_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  core: String
  core_not: String
  core_gt: String
  core_lt: String
  core_gte: String
  core_lte: String
  core_in: [String!]
  core_not_in: [String!]
  core_contains: String
  core_contains_nocase: String
  core_not_contains: String
  core_not_contains_nocase: String
  core_starts_with: String
  core_starts_with_nocase: String
  core_not_starts_with: String
  core_not_starts_with_nocase: String
  core_ends_with: String
  core_ends_with_nocase: String
  core_not_ends_with: String
  core_not_ends_with_nocase: String
  core_: CoreContract_filter
  outcomeId: BigInt
  outcomeId_not: BigInt
  outcomeId_gt: BigInt
  outcomeId_lt: BigInt
  outcomeId_gte: BigInt
  outcomeId_lte: BigInt
  outcomeId_in: [BigInt!]
  outcomeId_not_in: [BigInt!]
  condition: String
  condition_not: String
  condition_gt: String
  condition_lt: String
  condition_gte: String
  condition_lte: String
  condition_in: [String!]
  condition_not_in: [String!]
  condition_contains: String
  condition_contains_nocase: String
  condition_not_contains: String
  condition_not_contains_nocase: String
  condition_starts_with: String
  condition_starts_with_nocase: String
  condition_not_starts_with: String
  condition_not_starts_with_nocase: String
  condition_ends_with: String
  condition_ends_with_nocase: String
  condition_not_ends_with: String
  condition_not_ends_with_nocase: String
  condition_: LiveCondition_filter
  sortOrder: Int
  sortOrder_not: Int
  sortOrder_gt: Int
  sortOrder_lt: Int
  sortOrder_gte: Int
  sortOrder_lte: Int
  sortOrder_in: [Int!]
  sortOrder_not_in: [Int!]
  _betsEntityIds: [String!]
  _betsEntityIds_not: [String!]
  _betsEntityIds_contains: [String!]
  _betsEntityIds_contains_nocase: [String!]
  _betsEntityIds_not_contains: [String!]
  _betsEntityIds_not_contains_nocase: [String!]
  result: OutcomeResult
  result_not: OutcomeResult
  result_in: [OutcomeResult!]
  result_not_in: [OutcomeResult!]
  selections_: LiveSelection_filter
  _updatedAt: BigInt
  _updatedAt_not: BigInt
  _updatedAt_gt: BigInt
  _updatedAt_lt: BigInt
  _updatedAt_gte: BigInt
  _updatedAt_lte: BigInt
  _updatedAt_in: [BigInt!]
  _updatedAt_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiveOutcome_filter]
  or: [LiveOutcome_filter]
}

enum LiveOutcome_orderBy {
  id
  title
  core
  outcomeId
  condition
  sortOrder
  _betsEntityIds
  result
  selections
  _updatedAt
}

type LiveSelection {
  id: ID!
  bet: LiveBet!
  rawOdds: BigInt!
  odds: BigDecimal!
  _oddsDecimals: Int!
  result: SelectionResult
  _outcomeId: BigInt!
  outcome: LiveOutcome!
  margin: BigDecimal
  rawMargin: BigInt
}

input LiveSelection_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bet: String
  bet_not: String
  bet_gt: String
  bet_lt: String
  bet_gte: String
  bet_lte: String
  bet_in: [String!]
  bet_not_in: [String!]
  bet_contains: String
  bet_contains_nocase: String
  bet_not_contains: String
  bet_not_contains_nocase: String
  bet_starts_with: String
  bet_starts_with_nocase: String
  bet_not_starts_with: String
  bet_not_starts_with_nocase: String
  bet_ends_with: String
  bet_ends_with_nocase: String
  bet_not_ends_with: String
  bet_not_ends_with_nocase: String
  bet_: LiveBet_filter
  rawOdds: BigInt
  rawOdds_not: BigInt
  rawOdds_gt: BigInt
  rawOdds_lt: BigInt
  rawOdds_gte: BigInt
  rawOdds_lte: BigInt
  rawOdds_in: [BigInt!]
  rawOdds_not_in: [BigInt!]
  odds: BigDecimal
  odds_not: BigDecimal
  odds_gt: BigDecimal
  odds_lt: BigDecimal
  odds_gte: BigDecimal
  odds_lte: BigDecimal
  odds_in: [BigDecimal!]
  odds_not_in: [BigDecimal!]
  _oddsDecimals: Int
  _oddsDecimals_not: Int
  _oddsDecimals_gt: Int
  _oddsDecimals_lt: Int
  _oddsDecimals_gte: Int
  _oddsDecimals_lte: Int
  _oddsDecimals_in: [Int!]
  _oddsDecimals_not_in: [Int!]
  result: SelectionResult
  result_not: SelectionResult
  result_in: [SelectionResult!]
  result_not_in: [SelectionResult!]
  _outcomeId: BigInt
  _outcomeId_not: BigInt
  _outcomeId_gt: BigInt
  _outcomeId_lt: BigInt
  _outcomeId_gte: BigInt
  _outcomeId_lte: BigInt
  _outcomeId_in: [BigInt!]
  _outcomeId_not_in: [BigInt!]
  outcome: String
  outcome_not: String
  outcome_gt: String
  outcome_lt: String
  outcome_gte: String
  outcome_lte: String
  outcome_in: [String!]
  outcome_not_in: [String!]
  outcome_contains: String
  outcome_contains_nocase: String
  outcome_not_contains: String
  outcome_not_contains_nocase: String
  outcome_starts_with: String
  outcome_starts_with_nocase: String
  outcome_not_starts_with: String
  outcome_not_starts_with_nocase: String
  outcome_ends_with: String
  outcome_ends_with_nocase: String
  outcome_not_ends_with: String
  outcome_not_ends_with_nocase: String
  outcome_: LiveOutcome_filter
  margin: BigDecimal
  margin_not: BigDecimal
  margin_gt: BigDecimal
  margin_lt: BigDecimal
  margin_gte: BigDecimal
  margin_lte: BigDecimal
  margin_in: [BigDecimal!]
  margin_not_in: [BigDecimal!]
  rawMargin: BigInt
  rawMargin_not: BigInt
  rawMargin_gt: BigInt
  rawMargin_lt: BigInt
  rawMargin_gte: BigInt
  rawMargin_lte: BigInt
  rawMargin_in: [BigInt!]
  rawMargin_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiveSelection_filter]
  or: [LiveSelection_filter]
}

enum LiveSelection_orderBy {
  id
  bet
  rawOdds
  odds
  _oddsDecimals
  result
  _outcomeId
  outcome
  margin
  rawMargin
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Outcome {
  """
  Condition entity Id (Core Contract address + Condition Id) + outcome Id
  """
  id: ID!
  title: String
  core: CoreContract!
  outcomeId: BigInt!
  condition: Condition!
  fund: BigInt!
  rawCurrentOdds: BigInt!
  currentOdds: BigDecimal!
  sortOrder: Int!
  _betsEntityIds: [String!]
  result: OutcomeResult
  selections(skip: Int = 0, first: Int = 100, orderBy: Selection_orderBy, orderDirection: OrderDirection, where: Selection_filter): [Selection!]!
  _updatedAt: BigInt!
}

enum OutcomeResult {
  Won
  Lost
}

input Outcome_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  core: String
  core_not: String
  core_gt: String
  core_lt: String
  core_gte: String
  core_lte: String
  core_in: [String!]
  core_not_in: [String!]
  core_contains: String
  core_contains_nocase: String
  core_not_contains: String
  core_not_contains_nocase: String
  core_starts_with: String
  core_starts_with_nocase: String
  core_not_starts_with: String
  core_not_starts_with_nocase: String
  core_ends_with: String
  core_ends_with_nocase: String
  core_not_ends_with: String
  core_not_ends_with_nocase: String
  core_: CoreContract_filter
  outcomeId: BigInt
  outcomeId_not: BigInt
  outcomeId_gt: BigInt
  outcomeId_lt: BigInt
  outcomeId_gte: BigInt
  outcomeId_lte: BigInt
  outcomeId_in: [BigInt!]
  outcomeId_not_in: [BigInt!]
  condition: String
  condition_not: String
  condition_gt: String
  condition_lt: String
  condition_gte: String
  condition_lte: String
  condition_in: [String!]
  condition_not_in: [String!]
  condition_contains: String
  condition_contains_nocase: String
  condition_not_contains: String
  condition_not_contains_nocase: String
  condition_starts_with: String
  condition_starts_with_nocase: String
  condition_not_starts_with: String
  condition_not_starts_with_nocase: String
  condition_ends_with: String
  condition_ends_with_nocase: String
  condition_not_ends_with: String
  condition_not_ends_with_nocase: String
  condition_: Condition_filter
  fund: BigInt
  fund_not: BigInt
  fund_gt: BigInt
  fund_lt: BigInt
  fund_gte: BigInt
  fund_lte: BigInt
  fund_in: [BigInt!]
  fund_not_in: [BigInt!]
  rawCurrentOdds: BigInt
  rawCurrentOdds_not: BigInt
  rawCurrentOdds_gt: BigInt
  rawCurrentOdds_lt: BigInt
  rawCurrentOdds_gte: BigInt
  rawCurrentOdds_lte: BigInt
  rawCurrentOdds_in: [BigInt!]
  rawCurrentOdds_not_in: [BigInt!]
  currentOdds: BigDecimal
  currentOdds_not: BigDecimal
  currentOdds_gt: BigDecimal
  currentOdds_lt: BigDecimal
  currentOdds_gte: BigDecimal
  currentOdds_lte: BigDecimal
  currentOdds_in: [BigDecimal!]
  currentOdds_not_in: [BigDecimal!]
  sortOrder: Int
  sortOrder_not: Int
  sortOrder_gt: Int
  sortOrder_lt: Int
  sortOrder_gte: Int
  sortOrder_lte: Int
  sortOrder_in: [Int!]
  sortOrder_not_in: [Int!]
  _betsEntityIds: [String!]
  _betsEntityIds_not: [String!]
  _betsEntityIds_contains: [String!]
  _betsEntityIds_contains_nocase: [String!]
  _betsEntityIds_not_contains: [String!]
  _betsEntityIds_not_contains_nocase: [String!]
  result: OutcomeResult
  result_not: OutcomeResult
  result_in: [OutcomeResult!]
  result_not_in: [OutcomeResult!]
  selections_: Selection_filter
  _updatedAt: BigInt
  _updatedAt_not: BigInt
  _updatedAt_gt: BigInt
  _updatedAt_lt: BigInt
  _updatedAt_gte: BigInt
  _updatedAt_lte: BigInt
  _updatedAt_in: [BigInt!]
  _updatedAt_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Outcome_filter]
  or: [Outcome_filter]
}

enum Outcome_orderBy {
  id
  title
  core
  outcomeId
  condition
  fund
  rawCurrentOdds
  currentOdds
  sortOrder
  _betsEntityIds
  result
  selections
  _updatedAt
}

type Participant {
  """Game entity Id (LP Contract address + Game Id) + participant sortOrder"""
  id: ID!
  game: Game!
  name: String!
  image: String
  sortOrder: Int!
}

input Participant_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  game: String
  game_not: String
  game_gt: String
  game_lt: String
  game_gte: String
  game_lte: String
  game_in: [String!]
  game_not_in: [String!]
  game_contains: String
  game_contains_nocase: String
  game_not_contains: String
  game_not_contains_nocase: String
  game_starts_with: String
  game_starts_with_nocase: String
  game_not_starts_with: String
  game_not_starts_with_nocase: String
  game_ends_with: String
  game_ends_with_nocase: String
  game_not_ends_with: String
  game_not_ends_with_nocase: String
  game_: Game_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  image: String
  image_not: String
  image_gt: String
  image_lt: String
  image_gte: String
  image_lte: String
  image_in: [String!]
  image_not_in: [String!]
  image_contains: String
  image_contains_nocase: String
  image_not_contains: String
  image_not_contains_nocase: String
  image_starts_with: String
  image_starts_with_nocase: String
  image_not_starts_with: String
  image_not_starts_with_nocase: String
  image_ends_with: String
  image_ends_with_nocase: String
  image_not_ends_with: String
  image_not_ends_with_nocase: String
  sortOrder: Int
  sortOrder_not: Int
  sortOrder_gt: Int
  sortOrder_lt: Int
  sortOrder_gte: Int
  sortOrder_lte: Int
  sortOrder_in: [Int!]
  sortOrder_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Participant_filter]
  or: [Participant_filter]
}

enum Participant_orderBy {
  id
  game
  name
  image
  sortOrder
}

type Query {
  liquidityPoolContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPoolContract
  liquidityPoolContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPoolContract_orderBy
    orderDirection: OrderDirection
    where: LiquidityPoolContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPoolContract!]!
  liquidityPoolNft(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPoolNft
  liquidityPoolNfts(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPoolNft_orderBy
    orderDirection: OrderDirection
    where: LiquidityPoolNft_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPoolNft!]!
  liquidityPoolTransaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPoolTransaction
  liquidityPoolTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPoolTransaction_orderBy
    orderDirection: OrderDirection
    where: LiquidityPoolTransaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPoolTransaction!]!
  coreContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CoreContract
  coreContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: CoreContract_orderBy
    orderDirection: OrderDirection
    where: CoreContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CoreContract!]!
  expressPrematchRelation(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExpressPrematchRelation
  expressPrematchRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: ExpressPrematchRelation_orderBy
    orderDirection: OrderDirection
    where: ExpressPrematchRelation_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExpressPrematchRelation!]!
  azuroBetContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AzuroBetContract
  azuroBetContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: AzuroBetContract_orderBy
    orderDirection: OrderDirection
    where: AzuroBetContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AzuroBetContract!]!
  freebetContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FreebetContract
  freebetContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: FreebetContract_orderBy
    orderDirection: OrderDirection
    where: FreebetContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FreebetContract!]!
  sportHub(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SportHub
  sportHubs(
    skip: Int = 0
    first: Int = 100
    orderBy: SportHub_orderBy
    orderDirection: OrderDirection
    where: SportHub_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SportHub!]!
  sport(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sport
  sports(
    skip: Int = 0
    first: Int = 100
    orderBy: Sport_orderBy
    orderDirection: OrderDirection
    where: Sport_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sport!]!
  country(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Country
  countries(
    skip: Int = 0
    first: Int = 100
    orderBy: Country_orderBy
    orderDirection: OrderDirection
    where: Country_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Country!]!
  league(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): League
  leagues(
    skip: Int = 0
    first: Int = 100
    orderBy: League_orderBy
    orderDirection: OrderDirection
    where: League_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [League!]!
  game(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Game
  games(
    skip: Int = 0
    first: Int = 100
    orderBy: Game_orderBy
    orderDirection: OrderDirection
    where: Game_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Game!]!
  condition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Condition
  conditions(
    skip: Int = 0
    first: Int = 100
    orderBy: Condition_orderBy
    orderDirection: OrderDirection
    where: Condition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Condition!]!
  outcome(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Outcome
  outcomes(
    skip: Int = 0
    first: Int = 100
    orderBy: Outcome_orderBy
    orderDirection: OrderDirection
    where: Outcome_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Outcome!]!
  participant(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Participant
  participants(
    skip: Int = 0
    first: Int = 100
    orderBy: Participant_orderBy
    orderDirection: OrderDirection
    where: Participant_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Participant!]!
  bet(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bet
  bets(
    skip: Int = 0
    first: Int = 100
    orderBy: Bet_orderBy
    orderDirection: OrderDirection
    where: Bet_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bet!]!
  selection(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Selection
  selections(
    skip: Int = 0
    first: Int = 100
    orderBy: Selection_orderBy
    orderDirection: OrderDirection
    where: Selection_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Selection!]!
  freebet(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Freebet
  freebets(
    skip: Int = 0
    first: Int = 100
    orderBy: Freebet_orderBy
    orderDirection: OrderDirection
    where: Freebet_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Freebet!]!
  event(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  liveCondition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiveCondition
  liveConditions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiveCondition_orderBy
    orderDirection: OrderDirection
    where: LiveCondition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiveCondition!]!
  liveBet(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiveBet
  liveBets(
    skip: Int = 0
    first: Int = 100
    orderBy: LiveBet_orderBy
    orderDirection: OrderDirection
    where: LiveBet_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiveBet!]!
  liveSelection(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiveSelection
  liveSelections(
    skip: Int = 0
    first: Int = 100
    orderBy: LiveSelection_orderBy
    orderDirection: OrderDirection
    where: LiveSelection_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiveSelection!]!
  liveOutcome(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiveOutcome
  liveOutcomes(
    skip: Int = 0
    first: Int = 100
    orderBy: LiveOutcome_orderBy
    orderDirection: OrderDirection
    where: LiveOutcome_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiveOutcome!]!
  bettor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bettor
  bettors(
    skip: Int = 0
    first: Int = 100
    orderBy: Bettor_orderBy
    orderDirection: OrderDirection
    where: Bettor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bettor!]!
  betMargin(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BetMargin
  betMargins(
    skip: Int = 0
    first: Int = 100
    orderBy: BetMargin_orderBy
    orderDirection: OrderDirection
    where: BetMargin_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BetMargin!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Selection {
  id: ID!
  bet: Bet!
  rawOdds: BigInt!
  odds: BigDecimal!
  _oddsDecimals: Int!
  result: SelectionResult
  _outcomeId: BigInt!
  outcome: Outcome!
  margin: BigDecimal
  rawMargin: BigInt
}

enum SelectionResult {
  Won
  Lost
}

input Selection_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bet: String
  bet_not: String
  bet_gt: String
  bet_lt: String
  bet_gte: String
  bet_lte: String
  bet_in: [String!]
  bet_not_in: [String!]
  bet_contains: String
  bet_contains_nocase: String
  bet_not_contains: String
  bet_not_contains_nocase: String
  bet_starts_with: String
  bet_starts_with_nocase: String
  bet_not_starts_with: String
  bet_not_starts_with_nocase: String
  bet_ends_with: String
  bet_ends_with_nocase: String
  bet_not_ends_with: String
  bet_not_ends_with_nocase: String
  bet_: Bet_filter
  rawOdds: BigInt
  rawOdds_not: BigInt
  rawOdds_gt: BigInt
  rawOdds_lt: BigInt
  rawOdds_gte: BigInt
  rawOdds_lte: BigInt
  rawOdds_in: [BigInt!]
  rawOdds_not_in: [BigInt!]
  odds: BigDecimal
  odds_not: BigDecimal
  odds_gt: BigDecimal
  odds_lt: BigDecimal
  odds_gte: BigDecimal
  odds_lte: BigDecimal
  odds_in: [BigDecimal!]
  odds_not_in: [BigDecimal!]
  _oddsDecimals: Int
  _oddsDecimals_not: Int
  _oddsDecimals_gt: Int
  _oddsDecimals_lt: Int
  _oddsDecimals_gte: Int
  _oddsDecimals_lte: Int
  _oddsDecimals_in: [Int!]
  _oddsDecimals_not_in: [Int!]
  result: SelectionResult
  result_not: SelectionResult
  result_in: [SelectionResult!]
  result_not_in: [SelectionResult!]
  _outcomeId: BigInt
  _outcomeId_not: BigInt
  _outcomeId_gt: BigInt
  _outcomeId_lt: BigInt
  _outcomeId_gte: BigInt
  _outcomeId_lte: BigInt
  _outcomeId_in: [BigInt!]
  _outcomeId_not_in: [BigInt!]
  outcome: String
  outcome_not: String
  outcome_gt: String
  outcome_lt: String
  outcome_gte: String
  outcome_lte: String
  outcome_in: [String!]
  outcome_not_in: [String!]
  outcome_contains: String
  outcome_contains_nocase: String
  outcome_not_contains: String
  outcome_not_contains_nocase: String
  outcome_starts_with: String
  outcome_starts_with_nocase: String
  outcome_not_starts_with: String
  outcome_not_starts_with_nocase: String
  outcome_ends_with: String
  outcome_ends_with_nocase: String
  outcome_not_ends_with: String
  outcome_not_ends_with_nocase: String
  outcome_: Outcome_filter
  margin: BigDecimal
  margin_not: BigDecimal
  margin_gt: BigDecimal
  margin_lt: BigDecimal
  margin_gte: BigDecimal
  margin_lte: BigDecimal
  margin_in: [BigDecimal!]
  margin_not_in: [BigDecimal!]
  rawMargin: BigInt
  rawMargin_not: BigInt
  rawMargin_gt: BigInt
  rawMargin_lt: BigInt
  rawMargin_gte: BigInt
  rawMargin_lte: BigInt
  rawMargin_in: [BigInt!]
  rawMargin_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Selection_filter]
  or: [Selection_filter]
}

enum Selection_orderBy {
  id
  bet
  rawOdds
  odds
  _oddsDecimals
  result
  _outcomeId
  outcome
  margin
  rawMargin
}

type Sport {
  id: ID!
  sportId: BigInt!
  name: String!
  slug: String!
  sporthub: SportHub!
  countries(skip: Int = 0, first: Int = 100, orderBy: Country_orderBy, orderDirection: OrderDirection, where: Country_filter): [Country!]!
  games(skip: Int = 0, first: Int = 100, orderBy: Game_orderBy, orderDirection: OrderDirection, where: Game_filter): [Game!]!
}

type SportHub {
  id: ID!
  name: String!
  slug: String!
  sports(skip: Int = 0, first: Int = 100, orderBy: Sport_orderBy, orderDirection: OrderDirection, where: Sport_filter): [Sport!]
}

input SportHub_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  sports_: Sport_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SportHub_filter]
  or: [SportHub_filter]
}

enum SportHub_orderBy {
  id
  name
  slug
  sports
}

input Sport_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sportId: BigInt
  sportId_not: BigInt
  sportId_gt: BigInt
  sportId_lt: BigInt
  sportId_gte: BigInt
  sportId_lte: BigInt
  sportId_in: [BigInt!]
  sportId_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  sporthub: String
  sporthub_not: String
  sporthub_gt: String
  sporthub_lt: String
  sporthub_gte: String
  sporthub_lte: String
  sporthub_in: [String!]
  sporthub_not_in: [String!]
  sporthub_contains: String
  sporthub_contains_nocase: String
  sporthub_not_contains: String
  sporthub_not_contains_nocase: String
  sporthub_starts_with: String
  sporthub_starts_with_nocase: String
  sporthub_not_starts_with: String
  sporthub_not_starts_with_nocase: String
  sporthub_ends_with: String
  sporthub_ends_with_nocase: String
  sporthub_not_ends_with: String
  sporthub_not_ends_with_nocase: String
  sporthub_: SportHub_filter
  countries_: Country_filter
  games_: Game_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Sport_filter]
  or: [Sport_filter]
}

enum Sport_orderBy {
  id
  sportId
  name
  slug
  sporthub
  countries
  games
}

type Subscription {
  liquidityPoolContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPoolContract
  liquidityPoolContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPoolContract_orderBy
    orderDirection: OrderDirection
    where: LiquidityPoolContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPoolContract!]!
  liquidityPoolNft(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPoolNft
  liquidityPoolNfts(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPoolNft_orderBy
    orderDirection: OrderDirection
    where: LiquidityPoolNft_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPoolNft!]!
  liquidityPoolTransaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPoolTransaction
  liquidityPoolTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityPoolTransaction_orderBy
    orderDirection: OrderDirection
    where: LiquidityPoolTransaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityPoolTransaction!]!
  coreContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CoreContract
  coreContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: CoreContract_orderBy
    orderDirection: OrderDirection
    where: CoreContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CoreContract!]!
  expressPrematchRelation(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExpressPrematchRelation
  expressPrematchRelations(
    skip: Int = 0
    first: Int = 100
    orderBy: ExpressPrematchRelation_orderBy
    orderDirection: OrderDirection
    where: ExpressPrematchRelation_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExpressPrematchRelation!]!
  azuroBetContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AzuroBetContract
  azuroBetContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: AzuroBetContract_orderBy
    orderDirection: OrderDirection
    where: AzuroBetContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AzuroBetContract!]!
  freebetContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FreebetContract
  freebetContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: FreebetContract_orderBy
    orderDirection: OrderDirection
    where: FreebetContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FreebetContract!]!
  sportHub(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SportHub
  sportHubs(
    skip: Int = 0
    first: Int = 100
    orderBy: SportHub_orderBy
    orderDirection: OrderDirection
    where: SportHub_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SportHub!]!
  sport(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Sport
  sports(
    skip: Int = 0
    first: Int = 100
    orderBy: Sport_orderBy
    orderDirection: OrderDirection
    where: Sport_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Sport!]!
  country(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Country
  countries(
    skip: Int = 0
    first: Int = 100
    orderBy: Country_orderBy
    orderDirection: OrderDirection
    where: Country_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Country!]!
  league(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): League
  leagues(
    skip: Int = 0
    first: Int = 100
    orderBy: League_orderBy
    orderDirection: OrderDirection
    where: League_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [League!]!
  game(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Game
  games(
    skip: Int = 0
    first: Int = 100
    orderBy: Game_orderBy
    orderDirection: OrderDirection
    where: Game_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Game!]!
  condition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Condition
  conditions(
    skip: Int = 0
    first: Int = 100
    orderBy: Condition_orderBy
    orderDirection: OrderDirection
    where: Condition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Condition!]!
  outcome(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Outcome
  outcomes(
    skip: Int = 0
    first: Int = 100
    orderBy: Outcome_orderBy
    orderDirection: OrderDirection
    where: Outcome_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Outcome!]!
  participant(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Participant
  participants(
    skip: Int = 0
    first: Int = 100
    orderBy: Participant_orderBy
    orderDirection: OrderDirection
    where: Participant_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Participant!]!
  bet(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bet
  bets(
    skip: Int = 0
    first: Int = 100
    orderBy: Bet_orderBy
    orderDirection: OrderDirection
    where: Bet_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bet!]!
  selection(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Selection
  selections(
    skip: Int = 0
    first: Int = 100
    orderBy: Selection_orderBy
    orderDirection: OrderDirection
    where: Selection_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Selection!]!
  freebet(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Freebet
  freebets(
    skip: Int = 0
    first: Int = 100
    orderBy: Freebet_orderBy
    orderDirection: OrderDirection
    where: Freebet_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Freebet!]!
  event(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  liveCondition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiveCondition
  liveConditions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiveCondition_orderBy
    orderDirection: OrderDirection
    where: LiveCondition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiveCondition!]!
  liveBet(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiveBet
  liveBets(
    skip: Int = 0
    first: Int = 100
    orderBy: LiveBet_orderBy
    orderDirection: OrderDirection
    where: LiveBet_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiveBet!]!
  liveSelection(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiveSelection
  liveSelections(
    skip: Int = 0
    first: Int = 100
    orderBy: LiveSelection_orderBy
    orderDirection: OrderDirection
    where: LiveSelection_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiveSelection!]!
  liveOutcome(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiveOutcome
  liveOutcomes(
    skip: Int = 0
    first: Int = 100
    orderBy: LiveOutcome_orderBy
    orderDirection: OrderDirection
    where: LiveOutcome_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiveOutcome!]!
  bettor(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bettor
  bettors(
    skip: Int = 0
    first: Int = 100
    orderBy: Bettor_orderBy
    orderDirection: OrderDirection
    where: Bettor_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bettor!]!
  betMargin(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BetMargin
  betMargins(
    skip: Int = 0
    first: Int = 100
    orderBy: BetMargin_orderBy
    orderDirection: OrderDirection
    where: BetMargin_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BetMargin!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}